2:I[8047,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Column"]
3:I[435,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"RevealFx"]
4:I[9316,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Heading"]
5:I[2060,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Text"]
6:I[2092,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Button"]
7:I[1162,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Flex"]
8:I[5312,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Avatar"]
9:I[9818,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","185","static/chunks/app/layout-2e0302613eb6e80e.js"],"ProjectCard"]
b:I[5094,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Grid"]
c:I[7659,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"default"]
a:T85b,
# Why should I bother using a socket library?
A socket library reduces your program's design complexity, allowing you to focus on what's important instead of writing mostly boilerplate socket code. Furthermore, writing and implementing your socket code is complex and intensive, leaving plenty of room for error or security risks.

Furthermore, you must also implement Transport Layer Security overtop of your application, doubling the complexity as now you must rewrite your code for OpenSSL.

## What makes your socket library different?
My socket library is application layer and topology agnostic, meaning that you can opt to use encryption or avoid it entirely. You may also implement this socket library from a client or server perspective. You only have to configure the socket context to your liking, and then you may write your code once and have it work on both unencrypted traffic and encrypted traffic.

Furthermore, my socket library abstracts the process of creating contexts, binding to sockets, or reading and writing from said sockets. It's as simple and as streamlined as I could make it without encroaching on the developer experience.

# The developer experience.
My socket library is highly robust and accessible. To start, create a socket context: you'll need the address you'll be binding to or connecting to, along with the port, and whether you will be acting as a server or a client. But wait, what if you want to add Transport Layer Security? Use the create Transport Layer Security function and plug in your socket context, certificate, and private key files, and you're ready to go; you don't even have to rewrite your old socket code for unencrypted traffic handling as it automatically adjusts to the new changes that you've made with the context.

# My plans for the future.
I plan on eventually implementing keepalives and concurrent socket handling through whatever avenue is the most performant and accessible. I will likely assign user-defined functions to run whenever a new socket is accepted on the server side. A user-defined function will run in just one thread over one socket on the client side.d:T907,
# Should I trust code generated by artificial intelligence?
Absolutely not, because artificial intelligence doesn't have the reasoning capabilities that you do. On numerous occasions, when I've experimented with artificial intelligence to see its programming capabilities, it often shipped broken, nonsensical code full of vulnerabilities and depreciated functions. You should treat all code generated by artificial intelligence as untrusted and unsafe.

You should always avoid copying code from artificial intelligence and throwing it directly into your program unless you're certain precisely what it's doing and why it's there.

# What should I use artificial intelligence for?
Artificial intelligence is exemplary at finding and recognizing patterns in data. This trait makes it incredibly good for debugging programs because it can match debugging data with its immense dataset and determine what might have happened. For example, I once encountered an extremely vague OpenSSL error, and there weren't any results on Google for it, so I couldn't figure it out and was stumped. However, when I asked artificial intelligence what the error may be caused, it provided an excellent synopsis that cleared up the vague error message and allowed me to patch the bug.

# What shouldn't I use artificial intelligence for?
Do not use artificial intelligence mindlessly. You must understand precisely what it's doing and saying because artificial intelligence cannot tell if it's saying is correct or not. Even though artificial intelligence is trained on massive datasets, you are still more intelligent than it because you can discern what is proper and what is false. You shouldn't use artificial intelligence for tasks you don't understand yourself. Instead, you should teach yourself the topic and learn it, then use artificial intelligence later as an assistant and not an expert. You should become an expert and use artificial intelligence to automate tasks that waste your time, then audit what the artificial intelligence outputs and make corrections.

In short, you shouldn't rely on artificial intelligence to be an expert for you; instead, you should use it like an assistant. You should become the expert and audit, modify, and adjust whatever outputs are spewed from the artificial intelligence model.e:T2cf5,
# Which security measures should I implement?
Several techniques, ranging in complexity, can strengthen the security of your virtual private server. Implementing basic security measures to harden the security of your virtual private servers will prevent most attackers from infiltrating your server. However, you may wish to implement more sophisticated security measures to thwart skilled malicious actors from trying to break into your servers.

Depending on your threat model, you should implement either the baseline security measures or the baseline and advanced security measures.

# Baseline Security Measures
These baseline security measures should be followed on any machine where applicable. They are sufficient to stop the overwhelming majority of attackers and automated malicious bots on the Internet.

## Enable your firewall.
Simply said, you need a firewall. If you have any machine facing the Internet Internet, you should always run a firewall solution on it and upstream in the network, if applicable. A firewall can effectively prevent attackers from accessing ports on your server that you did not intend to be accessible.

My favorite solution for firewalls on Linux is ```ufw```.

On Debian Linux, you can install ```ufw``` using the following command.

```bash
sudo apt install ufw
```

Once installed, allow port ``22``, the ```SSH``` default port, to prevent locking yourself out of your server. You may do so using the following command.

```bash
sudo ufw allow 22
```

Using the following command, you may check which processes and ports are listening on your machine.

```bash
ss -lpnt
```

Ensure that if you intend for any ports to be accessible by others on the Internet, you allow them by using the command that allows port ``` 22 ``` access.

Once you've allowed the ports you wished to be accessible by anybody on the Internet, please double-check your changes before reloading your firewall. You may do so using the following command.

```bash
ufw status
```

Once you've reviewed your firewall ruleset, you may apply them to your server using the following commands.

```bash
ufw reload
ufw enable
```

Congrats, you now have a firewall protecting your server!

## Stop using ```root``` as your default user!
Stop immediately if you are using ```root``` as your default user. Using ```root``` as your default user is extremely dangerous because processes running under root effectively have access to your entire server. Instead, you should create another user with ```sudo``` privileges. Whenever you need ```root``` permissions to do something, you should invoke those permissions temporarily using ```sudo```.

As ```root``` on Debian Linux, use these commands to create a new user, set their password, and grant them access to escalate privileges safely using ```sudo```.

```adduser``` creates a new user on Debian Linux, designates their password, and creates their home directory.

```bash
adduser exampleuser
```

Now, grant ```exampleuser``` the ```sudo``` group which will permit them to use the ```sudo``` utility to safely escalate privileges temporarily through the shell.

```bash
usermod -a -G sudo exampleuser
```

We're not done yet, though. Ensure that the ```sudo``` group is permitted to use ```sudo``` by checking ```/etc/sudoers```.

It's best practice to use ```visudo``` to edit ```/etc/sudoers```. However, you may use any text editor to read and/or edit the file.

If you don't see this line in your ```/etc/sudoers```, make sure you add it so ```sudo``` works! If you see the line but it's commented out, please ensure that you uncomment it so it looks exactly like the text below.

```bash
%sudo ALL=(ALL) ALL
```

You may now switch to your newly created user using the following command.

```bash
su exampleuser
```
## Hardening the Secure Shell
Are you using password authentication to log into your server over ```SSH```? If you are, you are at a significantly high risk for automated bots trying to compromise your server by brute force your password from many different ```IP addresses```. Malicious actors often create bots that scan the Internet for servers with open ```SSH``` ports, like yours! Once they've discovered that you have an open ```SSH``` port, they will spam thousands of commonly used passwords until they get into your server. Humans are inherently flawed when generating unique, memorable, and strong passwords. Thankfully, there's a better way to authenticate yourself.

Through the power of ```SSH``` authentication keys, you can automatically log into your server remotely using the power of encryption.

You may generate a unique ```ED25519 SSH``` keypair using the command below. ```ED25519``` is regarded as one of our strongest, fastest, and most efficient elliptic curve signing algorithms available.

Also, whenever you generate this keypair, please set a password during the interactive prompt to protect your private key. Otherwise, somebody with access to your user or disks could pull your keypair and use it as if they were you!

```bash
ssh-keygen -t ed25519
``` 

Now that you've created a keypair, we must copy your public key to your server. Thankfully, ```SSH``` already has a utility for this! Use the command below to transfer your public keys to your server.

```bash
ssh-copy-id -i ~/.ssh/id_ed25519.pub exampleuser@yourserverip
```

After setting up your public key authentication on your server, try logging in.

```bash
ssh exampleuser@yourserverip
```

Enter your private key decryption password if you set one. Did you notice anything different? You didn't have to enter your remote user's password. Pure magic. Now that public key authentication is working let's harden your ```SSH``` configuration.

You may use the command below to peek at your ```SSH``` configuration.

```bash
sudo nano /etc/ssh/sshd_config
```

First, disable ```root``` logins. Since you set up a default user with ```sudo``` privileges, you shouldn't allow remote logins to ```root```. Make these exact changes to the file.

```bash
#LoginGraceTime 2m
PermitRootLogin no
#StrictModes yes
```

Next, explicitly enforce public key authentication. Make these exact changes.

```bash
#MaxSessions 10

PubkeyAuthentication yes
```

Because of the flaws above, we should no longer use password authentication. Therefore, we will also prohibit all authentication via passwords. Make these changes.

```bash
PasswordAuthentication yes
#PermitEmptyPasswords no
```

Now, double-check your edits to ensure that you've made them correctly. Save and close the file once you've ensured they're implemented correctly. Restart the ```SSH``` daemon.

```bash
systemctl restart sshd
```

Then close the ```SSH``` connection.

Now, log in again using the following command.

```bash
ssh exampleuser@yourserverip
```

If you set a private key, you should be prompted to type the password. Once you've decrypted it, you should be dropped into the shell on your server. If you didn't and you made a mistake, please fix it by using a ```KVM-over-IP``` solution that your hosting provider has provided you.

## Change your root password.
On the majority of hosting platforms, they assign a randomly assigned password to your ```root``` user upon installation of your server. It's generally good practice to change this password to a unique, random, and secure password of your choice.

Generate a password using a utility like ```pwgen``` and then store it in your password manager. The longer and more random your password, the more secure it'll be.

Next, escalate into your ```root``` user from your default user using this command.

```bash
sudo su
```

Now that you've escalated into your ```root``` user, execute this command to change their password.

```bash
passwd
```

The interactive prompt will ask you to change your root password twice to ensure you've entered it correctly.

### I accidentally pasted my password into the shell.
Make sure you always understand and look at what commands you're executing. However, mistakes do happen. If you entered your password mistakenly as a command into the ```bash shell```, then this will be kept in the ```.bash_history``` file.

Thankfully, there's an easy utility to permanently erase this mistake from your server's disk. Run the following command.

```bash
shred --zero --remove ~/.bash_history
```

This command will effectively permanently erase the data and make it unrecoverable by most, if not all, disk forensics software.

# Advanced security measures.
Assuming that you've completed the baseline security measures, you may want to implement more advanced security measures to stop even the most sophisticated attackers from breaking into your server. These steps aren't easy and require an extremely careful and tailored installation.

## Implement service controls.
An extremely effective way to prevent malicious actors from breaking into your system is not only to shut the door but to also put up a privacy fence that they cannot see through or traverse. In simplest terms, an attacker can't attack you if they cannot reach the resources they need to launch their attack!

There are two effective methods of doing this.

### Firewall-based service controls.
You may use the ```ufw``` firewall that we set up earlier to permit only certain ```IP addresses``` to connect to your servers ```SSH``` port.

If your internet service provider doesn't provide static ```IP address``` reservations to its customers, I would caution against this, as you may unintentionally lock yourself out of your server without getting back in.

First, find all your existing ```SSH``` rules in your firewall ruleset.

```bash
sudo ufw status numbered
```

Next, delete the rule(s) you selected from your ruleset by issuing this command. Be aware that the numbers mentioned by ```ufw``` above will decrease by one every time you delete a rule if the deleted rule comes before the other rules.

```bash
sudo ufw delete X
```
Now, add your new rule for your ```SSH``` port in ```ufw``` to only allow your ```IP address``` to connect.

```bash
sudo ufw allow from yourIPv4address proto tcp to any port 22
```

Check your firewall ruleset once again to ensure that the change you made was correct. Then, reload your firewall ruleset to rectify the changes.

```bash
sudo ufw reload
```

Now reconnect to your server over ```SSH```. The connection should've successfully gone through. However, if you made a mistake somewhere, you should use the built-in recovery console of your server through your hosting provider to revert these changes.

### Creating your own intranet.
Many hosting providers offer virtual private clouds, which are essentially shared private networks that machines can talk to each other privately on. So, hypothetically, if we add a server to this private network that has a ```Wireguard VPN``` that translates traffic from your home computer into traffic on the private network, you could log into your machines without even having these ports face the Internet. You'd have to firewall ```SSH``` to only be accessible from the private network interface on your servers.

This is an extremely complicated endeavor that I will write a guide on in another edition. However, it's the most secure, convenient, and adaptable method by far. You may also apply this to other services that you only want a few trusted people to access, such as ```IMAP``` (an email retrieval protocol).

I personally use and endorse this method for those who are able to implement it correctly.f:Tc5b,
# What is the purpose of a memory allocator?
A memory allocator traditionally refers to a library that abstracts the process of heap management to a program. A program uses a memory allocator to allocate a specific number of bytes from the kernel to store data it needs later.

The program expects that the pointer to the segment of memory will never change unless requested by the program to do so.

## What's a heap, and what's a segment?
The heap is a pile of segments that grows upward toward the stack. It is composed of any integer multiple of the size of a page, typically 4 kilobytes.

On most architectures, the minimum page size is 4 kilobytes and can't be smaller or larger. The kernel lends programs to these pages whenever they need to store data in memory.

You may allocate a page of any size from the Linux kernel, but you'll run into significant performance and fragmentation issues at the kernel level sooner or later. So, only allocate integer multiples of the page size from the kernel.

A segment is just a slice of the heap that a program allocates to store data. It may be any number of bytes and isn't restricted to being an integer multiple of the page size.

# How is your memory allocator different?
Traditionally, many applications on Linux-based operating systems use the ```glibc malloc```, which has prided itself on being balanced in performance and efficiency. However, the ```glibc malloc``` codebase is complicated and immense, making it difficult for some to learn how a memory allocator is implemented in C.

My memory allocator was designed by a novice C programmer to be performant, efficient, and comprehensible. Its entire structure, including comments, is contained in 622 lines of code.

## Lazy operations.
My memory allocator uses lazy operations. These operations are reserved for computationally expensive functions that don't necessarily need to be run constantly. They've been delegated to run only when the counter that holds the number of calls to the operation has reached a certain threshold. Upon reaching this threshold, the operation executes, and the counter for the number of calls is subtracted by one.

These lazy operations significantly reduce latency on the majority of operations. However, if the thresholds for these lazy operations aren't balanced correctly, they may lead to more program memory usage.

## No arenas or binning.
Furthermore, my memory allocator doesn't use arenas or bins, which are common in many memory allocators. Arenas or bins work by processing and sorting free segments based on their sizes, then picking one and providing it to the program. However, arenas and bins add significant design complexity, so I've excluded them entirely from my memory allocator implementation.

# Is this production ready?
No, this memory allocator wasn't designed for production. Although I've ensured that it remains stable under various standard conditions, I'm sure that it is not as hardened or battle-tested as ```glibc malloc```.

This memory allocator is a learning tool that demonstrates what a simple yet fast and efficient memory allocator in the C programming language looks like.10:T8f5,
# What's your design criteria?
I wanted a personal website that could act as my blog, project portfolio, and biography and be flexible to customize and expand later.

I didn't want to reinvent the wheel either, and I didn't want to spend days getting my site up and running. Therefore, I needed to use an excellent template and fork it to customize it.

# What framework did you use?
At first, I wanted to use Nuxt. Still, I encountered considerable issues that made the development experience painful and slow—from my personal experience, trying to use design systems like Preline was like pulling teeth.

Eventually, I landed on Nuxt's neighbor, Next.js, and I immediately fell in love with its simplicity, superb developer experience, and broad support. Furthermore, Next.js was natively supported by Vercel which made deploying my application a breeze.

# What template did you use?
Once I had decided on the framework I'd be using; I needed to find a flexible template that didn't require me to reinvent the wheel. 

After browsing GitHub, I landed on Magic Portfolio powered by Once UI. The design of Magic Portfolio was perfect, simple, and easy to modify to my liking.

# What do you plan on implementing in your fork?
I immediately got to work and forked Magic Portfolio. I made several changes, such as renaming tabs to make them more appropriate, trimming down some parts I didn't need, like password-protected routes, and writing a few project posts (including the one you're reading right now).

I plan to implement significant additions to modify the website's design and style. Specifically, I wish to alter the navigation bar to make it larger and a glassy blur. I also want to write more project posts on GitHub for all my finished projects.

# What did you use to deploy your website?
Vercel made deploying my website a dream. Previously, I used a virtual private server to host my applications; however, it was clunky and generally slower than I wanted.

Thankfully, Vercel exists. Vercel is a fantastic platform that allows you to deploy your application almost straight from your GitHub account. Push to central, and Vercel will take care of the rest by building and deploying your web application.

I also migrated over from Cloudflare to Vercel for my proxy solution.0:["i7bdlBfwZ2Ekg1WBzKtGo",[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"maxWidth":"m","gap":"xl","horizontal":"center","children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"WebPage\",\"name\":\"Bryce Servis's Portfolio\",\"description\":\"Portfolio website showcasing my projects as a Hobbyist Programmer\",\"url\":\"https://bryceserv.is\",\"image\":\"bryceserv.is/og?title=Bryce%20Servis's%20Portfolio\",\"publisher\":{\"@type\":\"Person\",\"name\":\"Bryce Servis\",\"image\":{\"@type\":\"ImageObject\",\"url\":\"bryceserv.is/images/avatar.png\"}}}"}}],["$","$L2",null,{"fillWidth":true,"paddingY":"l","gap":"m","children":["$","$L2",null,{"maxWidth":"s","children":[["$","$L3",null,{"translateY":"4","fillWidth":true,"horizontal":"start","paddingBottom":"m","children":["$","$L4",null,{"wrap":"balance","variant":"display-strong-l","children":["Hello, ",["$","br",null,{}],"I'm Bryce."]}]}],["$","$L3",null,{"translateY":"8","delay":0.2,"fillWidth":true,"horizontal":"start","paddingBottom":"m","children":["$","$L5",null,{"wrap":"balance","onBackground":"neutral-weak","variant":"heading-default-xl","children":"I am a hobbyist programmer and a student. I develop applications and libraries for Linux-based operating systems. But I also love tinkering and learning new technologies and languages to grow my skills as a programmer."}]}],["$","$L3",null,{"translateY":"12","delay":0.4,"horizontal":"start","children":["$","$L6",null,{"id":"about","data-border":"rounded","href":"/about","variant":"secondary","size":"m","arrowIcon":true,"children":["$","$L7",null,{"gap":"8","vertical":"center","children":[["$","$L8",null,{"style":{"marginLeft":"-0.75rem","marginRight":"0.25rem"},"src":"/images/avatar.png","size":"m"}],"About me"]}]}]}]]}]}],["$","$L3",null,{"translateY":"16","delay":0.6,"children":["$","$L2",null,{"fillWidth":true,"gap":"xl","marginBottom":"40","paddingX":"l","children":[["$","$L9","libsocket",{"priority":true,"href":"/projects/libsocket","images":["/images/gallery/libsocket.png"],"title":"libsocket","description":"An application layer agnostic socket library designed for portability and performance.","content":"$a","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/libsocket"}]]}]}],["$","$L7",null,{"fillWidth":true,"gap":"24","mobileDirection":"column","children":[["$","$L7",null,{"flex":1,"paddingLeft":"l","children":["$","$L4",null,{"as":"h2","variant":"display-strong-xs","wrap":"balance","children":"Latest from the blog"}]}],["$","$L7",null,{"flex":3,"paddingX":"20","children":["$","$Lb",null,{"columns":"2","mobileColumns":"1","fillWidth":true,"marginBottom":"40","gap":"m","children":[["$","$Lc","whenshouldyouleverageartificalintelligence",{"post":{"metadata":{"title":"When Should You Leverage Artifical Intelligence in Programming?","publishedAt":"2025-04-03","summary":"The playbook on when to use artifical intelligence when programming.","image":"/images/gallery/whenshouldyouleverageartificalintelligence.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"whenshouldyouleverageartificalintelligence","content":"$d"},"thumbnail":false}],["$","$Lc","securitymeasuresforavirtualprivateserver",{"post":{"metadata":{"title":"Security Measures for Debian Linux Servers","publishedAt":"2025-04-02","summary":"A series of best practices to secure your virtual private server.","image":"/images/gallery/securitymeasuresforavirtualprivateserver.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"securitymeasuresforavirtualprivateserver","content":"$e"},"thumbnail":false}]]}]}]]}],["$","$L2",null,{"fillWidth":true,"gap":"xl","marginBottom":"40","paddingX":"l","children":[["$","$L9","malloc",{"priority":true,"href":"/projects/malloc","images":["/images/gallery/malloc.jpg"],"title":"malloc","description":"A brief dive into the inner workings of heap allocators in the C programming language.","content":"$f","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/malloc"}],["$","$L9","bryceserv.is",{"priority":true,"href":"/projects/bryceserv.is","images":["/images/gallery/bryceserv.is.png"],"title":"bryceserv.is","description":"My personal website and portfolio.","content":"$10","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/bryceserv.is"}]]}]]}],null],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/15b9922eb12b1bb5.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/8047f5601c99893d.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/a8c4e1ca9815a60e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/e578cf952a0222b2.css","precedence":"next","crossOrigin":"$undefined"}]],"$L11"],null],null],["$L12",null]]]]
13:I[6995,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"ToastProvider"]
14:I[124,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"Background"]
15:I[9295,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","185","static/chunks/app/layout-2e0302613eb6e80e.js"],"Header"]
16:I[9890,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","185","static/chunks/app/layout-2e0302613eb6e80e.js"],"Route"]
17:I[4707,[],""]
18:I[6423,[],""]
19:I[7868,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","160","static/chunks/app/not-found-ec0385ec325641a4.js"],"IconButton"]
11:["$","$L7",null,{"as":"html","lang":"en","background":"page","data-neutral":"slate","data-brand":"aqua","data-accent":"aqua","data-solid":"contrast","data-solid-style":"flat","data-theme":"dark","data-border":"conservative","data-surface":"translucent","data-transition":"all","className":"__variable_d65c78 __variable_bcf733","children":["$","$L13",null,{"children":["$","$L2",null,{"style":{"minHeight":"100vh"},"as":"body","fillWidth":true,"margin":"0","padding":"0","children":[["$","$L14",null,{"mask":{"cursor":false,"x":0,"y":0,"radius":75},"gradient":{"display":false,"x":50,"y":0,"width":100,"height":100,"tilt":0,"colorStart":"brand-background-strong","colorEnd":"static-transparent","opacity":50},"dots":{"display":false,"color":"brand-on-background-weak","size":1,"opacity":100},"grid":{"display":true,"color":"brand-background-strong","width":"$undefined","height":"$undefined","opacity":100},"lines":{"display":false,"opacity":100}}],["$","$L7",null,{"fillWidth":true,"minHeight":"16"}],["$","$L15",null,{}],["$","$L7",null,{"position":"relative","zIndex":0,"fillWidth":true,"paddingY":"l","paddingX":"l","horizontal":"center","flex":1,"children":["$","$L7",null,{"horizontal":"center","fillWidth":true,"minHeight":"0","children":["$","$L16",null,{"children":["$","$L17",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L18",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L2",null,{"as":"section","fill":true,"center":true,"paddingBottom":"160","children":[["$","$L5",null,{"marginBottom":"s","variant":"display-strong-xl","children":"404"}],["$","$L4",null,{"marginBottom":"l","variant":"display-default-xs","children":"Page Not Found"}],["$","$L5",null,{"onBackground":"neutral-weak","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}]}]}],["$","$L7",null,{"as":"footer","position":"relative","fillWidth":true,"padding":"8","horizontal":"center","mobileDirection":"column","children":[["$","$L7",null,{"className":"Footer_mobile__TYNqJ","maxWidth":"m","paddingY":"8","paddingX":"16","gap":"16","horizontal":"space-between","vertical":"center","children":[["$","$L5",null,{"variant":"body-default-s","onBackground":"neutral-strong","children":"Published on April 2nd, 2025."}],["$","$L7",null,{"gap":"16","children":[["$","$L19","Email",{"href":"mailto:bryceservis@bryceserv.is","icon":"email","tooltip":"Email","size":"s","variant":"ghost"}],["$","$L19","Pretty Good Privacy",{"href":"/907873A1.asc","icon":"pgp","tooltip":"Pretty Good Privacy","size":"s","variant":"ghost"}],["$","$L19","Resume",{"href":"/resume.pdf","icon":"doc","tooltip":"Resume","size":"s","variant":"ghost"}],["$","$L19","GitHub",{"href":"https://github.com/servisbryce/","icon":"github","tooltip":"GitHub","size":"s","variant":"ghost"}],["$","$L19","LinkedIn",{"href":"https://www.linkedin.com/in/bryce-servis-328381357","icon":"linkedin","tooltip":"LinkedIn","size":"s","variant":"ghost"}]]}]]}],["$","$L7",null,{"height":"80","show":"s"}]]}]]}]}]}]
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Bryce Servis's Portfolio"}],["$","meta","3",{"name":"description","content":"Portfolio website showcasing my projects as a Hobbyist Programmer"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"Bryce Servis's Portfolio"}],["$","meta","7",{"property":"og:description","content":"Portfolio website showcasing my projects as a Hobbyist Programmer"}],["$","meta","8",{"property":"og:url","content":"https://bryceserv.is/"}],["$","meta","9",{"property":"og:image","content":"https://bryceserv.is/og?title=Bryce%20Servis%27s%20Portfolio"}],["$","meta","10",{"property":"og:image:alt","content":"Bryce Servis's Portfolio"}],["$","meta","11",{"property":"og:type","content":"website"}],["$","meta","12",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","13",{"name":"twitter:title","content":"Bryce Servis's Portfolio"}],["$","meta","14",{"name":"twitter:description","content":"Portfolio website showcasing my projects as a Hobbyist Programmer"}],["$","meta","15",{"name":"twitter:image","content":"https://bryceserv.is/og?title=Bryce%20Servis%27s%20Portfolio"}],["$","meta","16",{"name":"next-size-adjust"}]]
1:null
