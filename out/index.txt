2:I[8047,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Column"]
3:I[435,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"RevealFx"]
4:I[9316,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Heading"]
5:I[2060,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Text"]
6:I[2092,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Button"]
7:I[1162,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Flex"]
8:I[5312,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Avatar"]
9:I[9818,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"ProjectCard"]
b:I[5094,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Grid"]
c:I[7659,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"default"]
a:T627,
# Why should I bother using a socket library?
A socket library reduces your program's design complexity, allowing you to focus on what's important instead of writing mostly boilerplate socket code. Furthermore, writing and implementing your socket code is complex and intensive, leaving plenty of room for error or security risks.

Furthermore, you must also implement Transport Layer Security overtop of your application, doubling the complexity as now you must rewrite your code for OpenSSL.

## What makes your socket library different?
My socket library provides nearly everything you need to get a reliable, performant, and secure socket server up and running within seconds. Any code that is repetitious is functionized and automated for the best development experience possible. 

Furthermore, my socket library makes use of a thread pool that uses my own stepwise algorithm to automatically scale whenever necessary.

# The developer experience.
My server socket library provides an excellent foundation that is able to be started in just seconds with little to no effort. Fill out the parameters structure, pass it to the context generator, write a payload function, and then listen using that context and pass it the payload function. As soon as a user connects, the server handles the negotiations, your payload function is executed, and then the server closes the connection automatically.

# My plans for the future.
From my ventures in this project, I learned about thread pools which has inspired me to create my own scalable performant thread pool framework.d:Tf02,
# Why do you need to execute external machine code at runtime dynamically?
I am designing a distributed computing system in which raw machine code is sent over a network for a worker peer to execute and transmit the result to the requester. The architecture in which the library file is compiled for is assumed to match the architecture of the worker peers. However, there was a significant roadblock in the development of said system: how would I dynamically run external machine code at runtime? The function signatures are to remain the same per the agreed protocol of the distributed computing system (the function signature takes a void pointer parameter and returns a void pointer parameter). I initially tried to read raw object files and execute them at runtime, which was not in the scope of my project because I soon realized I was trying to build a dynamic library loader. Thankfully, Linux has a fantastic dynamic library loader called ```dlfcn``` that does all the heavy lifting for us.

# The dynamic library loader.
The dynamic library loader, in short, reads a ```.so``` file and disassembles it. Then, pick and prod in the library for the function name you wish to execute. The dynamic library loader will automatically pull the machine code for said function from the shared object file and make it accessible via a function call. All that's left is to perform some casting to indicate that the pointer you just pulled out of the dynamic library loader is a function you can call (you must also specify parameters).

The entire process may be summed up like this.
```c
/* Open the shared object file. */
void *dynamic_library_context = dlopen("./mylibrary.so", RTLD_LAZY);

/* Create the function signature. */
void *(*myfunction)(void *myfunction_vargs_p);

/* Rummage through the shared object file to find a function called myfunction. 
   Then, load the machine code for that function into memory and output a pointer 
   to it. Finally, assign said pointer to the function signature we created
   earlier so the program knows this is a function call and not just a regular pointer. */
*(void **)(&myfunction) = dlsym(dynamic_library_context, "myfunction");

/* Call our newly created function! */
myfunction(NULL);
```

# What are the advantages and disadvantages of doing this?
There are many advantages to using the dynamic library loader compared to just blatantly running machine code you found in an object file. Using the dynamic library loader isn't as janky compared to loading external object files into memory and executing them haphazardly. The dynamic library loader is a battle-tested way to manage external functions rather than trying to roll your loader. There are also some unintentional benefits to using this approach to dynamically run external code at runtime, such as increased memory efficiency and smaller binaries.

However, some significant disadvantages make this approach undesirable to some who may opt to use just-in-time compilation as an alternative. In general, the dynamically linked loader blindly allows you to import and execute libraries without oversight. The lack of oversight makes dynamic library loading extremely powerful and modular. However, it poses a significant security vulnerability as the library may be malicious or injected with malicious machine code that could easily compromise your system. Moreover, you must explicitly define the function signatures you use in the library, as you can't readily determine what parameters a function takes by just looking at its machine code (this is why header files exist for libraries). However, a solution to this is having all your library functions input and output void pointers. These void pointers may be used to point toward any piece of data (such as a structure containing an assortment of second-layer parameters).e:Tbb4,
# What is structured data transmission?
Structured data transmission is a way to transfer serialized data over the Internet in a structured manner. The Internet is built for data transfer; however, various protocols have limitations that must be worked around to compensate for multiple scenarios.

# The maximum transfer buffer.
There is a maximum transfer buffer for all sockets. The maximum transfer buffer length differs between programs and protocols, but generally, the agreed-upon maximum size is sixty-four megabytes. This transfer buffer limit means you can only write data smaller than or equal in length to the buffer transfer limit.

# Chunked data transfer.
A way to get around the maximum transfer buffer is by slicing our data transmission into several sequential chunks. We evenly divide our completed data by the maximum data transfer buffer limit and then mark each chunk with what part of the sequence it is. Then, the client reconstructs and reorders the data transmission using the segments received from the peer. 

# Serialization.
Serialization is storing complex objects, like structures, in a standardized manner, typically for ease of use. When transferring data, the Internet has little to no concept of data structures specific to one language. For portability and accessibility, we serialize these structures and encode their data into long strings that we can reconstruct on another machine. Serialization dramatically simplifies the transfer of structures between machines. However, there are some downsides to using serialization. Serialization is slow as it involves a lot of decoding, encoding, and translation from string to structure. Serialization also possesses substantial security overhead because you must interact with countless buffers, strings, and user-inputted data. You should generally use a trusted and battle-tested serialization library unless you are sure what you are doing. 

# Alternatives to serialization.
Alternatively, if you don't want to serialize your structures, you can always write the raw memory from the structures over the Internet. You shouldn't do this because of portability concerns due to each language usually having its own unique schema for storing data. However, it is an option that is available to you. You'd need to demark the structure of the object so the program will know what structure you're trying to create. Then, you should demark the data length inserted into that structure. Lastly, after you've demarked the previous two pieces of metadata, you should append your raw data. Then, repeat for all the fields of your structure. Whenever a peer receives this data, it must first understand what kind of structure you're creating, and it will figure this out by using the demarkation you put in your transmission earlier. Then, it will find the length demarkation and then read the specified amount of bytes after that length demarker. It will repeat these last two steps for the remaining transferred data.f:Tc5b,
# What is the purpose of a memory allocator?
A memory allocator traditionally refers to a library that abstracts the process of heap management to a program. A program uses a memory allocator to allocate a specific number of bytes from the kernel to store data it needs later.

The program expects that the pointer to the segment of memory will never change unless requested by the program to do so.

## What's a heap, and what's a segment?
The heap is a pile of segments that grows upward toward the stack. It is composed of any integer multiple of the size of a page, typically 4 kilobytes.

On most architectures, the minimum page size is 4 kilobytes and can't be smaller or larger. The kernel lends programs to these pages whenever they need to store data in memory.

You may allocate a page of any size from the Linux kernel, but you'll run into significant performance and fragmentation issues at the kernel level sooner or later. So, only allocate integer multiples of the page size from the kernel.

A segment is just a slice of the heap that a program allocates to store data. It may be any number of bytes and isn't restricted to being an integer multiple of the page size.

# How is your memory allocator different?
Traditionally, many applications on Linux-based operating systems use the ```glibc malloc```, which has prided itself on being balanced in performance and efficiency. However, the ```glibc malloc``` codebase is complicated and immense, making it difficult for some to learn how a memory allocator is implemented in C.

My memory allocator was designed by a novice C programmer to be performant, efficient, and comprehensible. Its entire structure, including comments, is contained in 622 lines of code.

## Lazy operations.
My memory allocator uses lazy operations. These operations are reserved for computationally expensive functions that don't necessarily need to be run constantly. They've been delegated to run only when the counter that holds the number of calls to the operation has reached a certain threshold. Upon reaching this threshold, the operation executes, and the counter for the number of calls is subtracted by one.

These lazy operations significantly reduce latency on the majority of operations. However, if the thresholds for these lazy operations aren't balanced correctly, they may lead to more program memory usage.

## No arenas or binning.
Furthermore, my memory allocator doesn't use arenas or bins, which are common in many memory allocators. Arenas or bins work by processing and sorting free segments based on their sizes, then picking one and providing it to the program. However, arenas and bins add significant design complexity, so I've excluded them entirely from my memory allocator implementation.

# Is this production ready?
No, this memory allocator wasn't designed for production. Although I've ensured that it remains stable under various standard conditions, I'm sure that it is not as hardened or battle-tested as ```glibc malloc```.

This memory allocator is a learning tool that demonstrates what a simple yet fast and efficient memory allocator in the C programming language looks like.10:T8f5,
# What's your design criteria?
I wanted a personal website that could act as my blog, project portfolio, and biography and be flexible to customize and expand later.

I didn't want to reinvent the wheel either, and I didn't want to spend days getting my site up and running. Therefore, I needed to use an excellent template and fork it to customize it.

# What framework did you use?
At first, I wanted to use Nuxt. Still, I encountered considerable issues that made the development experience painful and slow—from my personal experience, trying to use design systems like Preline was like pulling teeth.

Eventually, I landed on Nuxt's neighbor, Next.js, and I immediately fell in love with its simplicity, superb developer experience, and broad support. Furthermore, Next.js was natively supported by Vercel which made deploying my application a breeze.

# What template did you use?
Once I had decided on the framework I'd be using; I needed to find a flexible template that didn't require me to reinvent the wheel. 

After browsing GitHub, I landed on Magic Portfolio powered by Once UI. The design of Magic Portfolio was perfect, simple, and easy to modify to my liking.

# What do you plan on implementing in your fork?
I immediately got to work and forked Magic Portfolio. I made several changes, such as renaming tabs to make them more appropriate, trimming down some parts I didn't need, like password-protected routes, and writing a few project posts (including the one you're reading right now).

I plan to implement significant additions to modify the website's design and style. Specifically, I wish to alter the navigation bar to make it larger and a glassy blur. I also want to write more project posts on GitHub for all my finished projects.

# What did you use to deploy your website?
Vercel made deploying my website a dream. Previously, I used a virtual private server to host my applications; however, it was clunky and generally slower than I wanted.

Thankfully, Vercel exists. Vercel is a fantastic platform that allows you to deploy your application almost straight from your GitHub account. Push to central, and Vercel will take care of the rest by building and deploying your web application.

I also migrated over from Cloudflare to Vercel for my proxy solution.0:["q9mHKviwztif2NQB02muW",[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"maxWidth":"m","gap":"xl","horizontal":"center","children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"WebPage\",\"name\":\"Bryce Servis's Portfolio\",\"description\":\"Portfolio website showcasing my projects as a Hobbyist Programmer\",\"url\":\"https://bryceserv.is\",\"image\":\"bryceserv.is/og?title=Bryce%20Servis's%20Portfolio\",\"publisher\":{\"@type\":\"Person\",\"name\":\"Bryce Servis\",\"image\":{\"@type\":\"ImageObject\",\"url\":\"bryceserv.is/images/avatar.png\"}}}"}}],["$","$L2",null,{"fillWidth":true,"paddingY":"l","gap":"m","children":["$","$L2",null,{"maxWidth":"s","children":[["$","$L3",null,{"translateY":"4","fillWidth":true,"horizontal":"start","paddingBottom":"m","children":["$","$L4",null,{"wrap":"balance","variant":"display-strong-l","children":["Hello, ",["$","br",null,{}],"I'm Bryce."]}]}],["$","$L3",null,{"translateY":"8","delay":0.2,"fillWidth":true,"horizontal":"start","paddingBottom":"m","children":["$","$L5",null,{"wrap":"balance","onBackground":"neutral-weak","variant":"heading-default-xl","children":"I am a hobbyist programmer and a student. I develop applications and libraries for Linux-based operating systems. But I also love tinkering and learning new technologies and languages to grow my skills as a programmer."}]}],["$","$L3",null,{"translateY":"12","delay":0.4,"horizontal":"start","children":["$","$L6",null,{"id":"about","data-border":"rounded","href":"/about","variant":"secondary","size":"m","arrowIcon":true,"children":["$","$L7",null,{"gap":"8","vertical":"center","children":[["$","$L8",null,{"style":{"marginLeft":"-0.75rem","marginRight":"0.25rem"},"src":"/images/avatar.png","size":"m"}],"About me"]}]}]}]]}]}],["$","$L3",null,{"translateY":"16","delay":0.6,"children":["$","$L2",null,{"fillWidth":true,"gap":"xl","marginBottom":"40","paddingX":"l","children":[["$","$L9","libsocket",{"priority":true,"href":"/projects/libsocket","images":["/images/gallery/libsocket.png"],"title":"libsocket","description":"A server socket library designed to make socket programming easier.","content":"$a","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/libsocket"}]]}]}],["$","$L7",null,{"fillWidth":true,"gap":"24","mobileDirection":"column","children":[["$","$L7",null,{"flex":1,"paddingLeft":"l","children":["$","$L4",null,{"as":"h2","variant":"display-strong-xs","wrap":"balance","children":"Latest from the blog"}]}],["$","$L7",null,{"flex":3,"paddingX":"20","children":["$","$Lb",null,{"columns":"2","mobileColumns":"1","fillWidth":true,"marginBottom":"40","gap":"m","children":[["$","$Lc","dynamicexecutionofexternalmachinecodeatruntime",{"post":{"metadata":{"title":"Dynamic Execution of External Machine Code at Runtime","publishedAt":"2025-04-15","summary":"The execution of external machine code at runtime is typically a difficult endeavour. However, there's a convenient and reliable way of doing this.","image":"/images/gallery/dynamicexecutionofexternalmachinecodeatruntime.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"dynamicexecutionofexternalmachinecodeatruntime","content":"$d"},"thumbnail":false}],["$","$Lc","structureddatatransmission",{"post":{"metadata":{"title":"Structured Data Transmission","publishedAt":"2025-04-13","summary":"The various technologies and methods implemented to transmit data structures over the internet.","image":"/images/gallery/structureddatatransmission.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"structureddatatransmission","content":"$e"},"thumbnail":false}]]}]}]]}],["$","$L2",null,{"fillWidth":true,"gap":"xl","marginBottom":"40","paddingX":"l","children":[["$","$L9","malloc",{"priority":true,"href":"/projects/malloc","images":["/images/gallery/malloc.jpg"],"title":"malloc","description":"A brief dive into the inner workings of heap allocators in the C programming language.","content":"$f","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/malloc"}],["$","$L9","bryceserv.is",{"priority":true,"href":"/projects/bryceserv.is","images":["/images/gallery/bryceserv.is.png"],"title":"bryceserv.is","description":"My personal website and portfolio.","content":"$10","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/bryceserv.is"}]]}]]}],null],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/15b9922eb12b1bb5.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/bf5abfa89ee118e0.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/a8c4e1ca9815a60e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/e578cf952a0222b2.css","precedence":"next","crossOrigin":"$undefined"}]],"$L11"],null],null],["$L12",null]]]]
13:I[6995,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"ToastProvider"]
14:I[124,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Background"]
15:I[9295,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Header"]
16:I[9890,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"Route"]
17:I[4707,[],""]
18:I[6423,[],""]
19:I[7868,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","931","static/chunks/app/page-bd5dc6c2ebf0b037.js"],"IconButton"]
11:["$","$L7",null,{"as":"html","lang":"en","background":"page","data-neutral":"slate","data-brand":"aqua","data-accent":"aqua","data-solid":"contrast","data-solid-style":"flat","data-theme":"dark","data-border":"conservative","data-surface":"translucent","data-transition":"all","className":"__variable_d65c78 __variable_bcf733","children":["$","$L13",null,{"children":["$","$L2",null,{"style":{"minHeight":"100vh"},"as":"body","fillWidth":true,"margin":"0","padding":"0","children":[["$","$L14",null,{"mask":{"cursor":false,"x":0,"y":0,"radius":75},"gradient":{"display":false,"x":50,"y":0,"width":100,"height":100,"tilt":0,"colorStart":"brand-background-strong","colorEnd":"static-transparent","opacity":50},"dots":{"display":false,"color":"brand-on-background-weak","size":1,"opacity":100},"grid":{"display":true,"color":"brand-background-strong","width":"$undefined","height":"$undefined","opacity":100},"lines":{"display":false,"opacity":100}}],["$","$L7",null,{"fillWidth":true,"minHeight":"16"}],["$","$L15",null,{}],["$","$L7",null,{"position":"relative","zIndex":0,"fillWidth":true,"paddingY":"l","paddingX":"l","horizontal":"center","flex":1,"children":["$","$L7",null,{"horizontal":"center","fillWidth":true,"minHeight":"0","children":["$","$L16",null,{"children":["$","$L17",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L18",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L2",null,{"as":"section","fill":true,"center":true,"paddingBottom":"160","children":[["$","$L5",null,{"marginBottom":"s","variant":"display-strong-xl","children":"404"}],["$","$L4",null,{"marginBottom":"l","variant":"display-default-xs","children":"Page Not Found"}],["$","$L5",null,{"onBackground":"neutral-weak","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}]}]}],["$","$L7",null,{"as":"footer","position":"relative","fillWidth":true,"padding":"8","horizontal":"center","mobileDirection":"column","children":[["$","$L7",null,{"className":"Footer_mobile__TYNqJ","maxWidth":"m","paddingY":"8","paddingX":"16","gap":"16","horizontal":"space-between","vertical":"center","children":[["$","$L5",null,{"variant":"body-default-s","onBackground":"neutral-strong","children":"Published on April 7th, 2025."}],["$","$L7",null,{"gap":"16","children":[["$","$L19","Email",{"href":"mailto:bryceservis@bryceserv.is","icon":"email","tooltip":"Email","size":"s","variant":"ghost"}],["$","$L19","Pretty Good Privacy",{"href":"/907873A1.asc","icon":"pgp","tooltip":"Pretty Good Privacy","size":"s","variant":"ghost"}],["$","$L19","Resume",{"href":"/resume.pdf","icon":"doc","tooltip":"Resume","size":"s","variant":"ghost"}],["$","$L19","GitHub",{"href":"https://github.com/servisbryce/","icon":"github","tooltip":"GitHub","size":"s","variant":"ghost"}],["$","$L19","LinkedIn",{"href":"https://www.linkedin.com/in/bryce-servis-328381357","icon":"linkedin","tooltip":"LinkedIn","size":"s","variant":"ghost"}]]}]]}],["$","$L7",null,{"height":"80","show":"s"}]]}]]}]}]}]
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Bryce Servis's Portfolio"}],["$","meta","3",{"name":"description","content":"Portfolio website showcasing my projects as a Hobbyist Programmer"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"Bryce Servis's Portfolio"}],["$","meta","7",{"property":"og:description","content":"Portfolio website showcasing my projects as a Hobbyist Programmer"}],["$","meta","8",{"property":"og:url","content":"https://bryceserv.is/"}],["$","meta","9",{"property":"og:image","content":"https://bryceserv.is/og?title=Bryce%20Servis%27s%20Portfolio"}],["$","meta","10",{"property":"og:image:alt","content":"Bryce Servis's Portfolio"}],["$","meta","11",{"property":"og:type","content":"website"}],["$","meta","12",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","13",{"name":"twitter:title","content":"Bryce Servis's Portfolio"}],["$","meta","14",{"name":"twitter:description","content":"Portfolio website showcasing my projects as a Hobbyist Programmer"}],["$","meta","15",{"name":"twitter:image","content":"https://bryceserv.is/og?title=Bryce%20Servis%27s%20Portfolio"}],["$","meta","16",{"name":"next-size-adjust"}]]
1:null
