2:I[8047,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Column"]
4:I[9818,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"ProjectCard"]
9:I[4707,[],""]
a:I[6423,[],""]
3:T45a,{"@context":"https://schema.org","@type":"CollectionPage","headline":"My projects.","description":"Read what projects Bryce Servis has been working on recently.","url":"https://bryceserv.is/projects","image":"bryceserv.is/og?title=Design%20Projects","author":{"@type":"Person","name":"Bryce Servis"},"hasPart":[{"@type":"Creativeprojects","headline":"bryceserv.is","description":"My personal website and portfolio.","url":"https://bryceserv.is/projects/bryceserv.is","image":"bryceserv.is/"},{"@type":"Creativeprojects","headline":"Grid","description":"A distributed and centralized multithreaded computing system.","url":"https://bryceserv.is/projects/grid","image":"bryceserv.is/"},{"@type":"Creativeprojects","headline":"libsocket","description":"A server socket library designed to make socket programming easier.","url":"https://bryceserv.is/projects/libsocket","image":"bryceserv.is/"},{"@type":"Creativeprojects","headline":"malloc","description":"A brief dive into the inner workings of heap allocators in the C programming language.","url":"https://bryceserv.is/projects/malloc","image":"bryceserv.is/"}]}5:Ta03,
# What's the general idea behind Grid?
Grid is designed to effectively parallelize the execution of functions in no particular order across multiple different peer computers. You are to create a Grid server to which worker clients connect and wait to receive requests.

Once you've assigned a request through the Grid servers' Unix socket using the provided helper program or your own C program, the server will assign the request to whichever machine is best suited at that moment.

Then, the Grid server sends the request, and the worker-client receives the transmission from the server. The serialized transmission is resequenced, deserialized, and stored within memory. A file is written along with a memory buffer containing parameters for the function contained inside of the file.

The dynamic loader then looks for a function called "main" from within the file received from the server. Once "main" is found, it's thrown into the thread pool along with its parameter memory buffer and executed.

The function's results are then stored in a corresponding memory buffer and sent straight back to the server. The Grid server then sequences and deserializes the memory buffer and transmits the result to the requester.

# How secure is it?
Transport Layer Security (minimum version 1.2) secures the entire Grid protocol, which encrypts and verifies data sent and received by either party. We are to assume that the Grid server that gives requests to worker clients has its domain name to ensure the certificate's validity.

If you wish, which I don't recommend, you may disable Transport Layer Security and run the program without any protections, which is extremely dangerous. If data is intercepted and modified, it could allow malicious actors to execute code on your system remotely.

# How fast is it?
The Grid protocol has been built from scratch. It's a verbose and serialized protocol built using C structures, which are then serialized and transmitted over a socket. These design choices make the Grid protocol blazingly fast, keeping latency as low as possible. Moreover, all functions are executed within a thread pool, providing strong multithreading capabilities.

# How reliable is it?
It's somewhat fragile at the moment (I'm still in the development phase) because if you have an inexcusable error from within a function, it may cause the entire Grid service to crash.

However, I plan to have the program fork whenever an external function is running to prevent the entire Grid service from being taken down if the external function crashes.6:T627,
# Why should I bother using a socket library?
A socket library reduces your program's design complexity, allowing you to focus on what's important instead of writing mostly boilerplate socket code. Furthermore, writing and implementing your socket code is complex and intensive, leaving plenty of room for error or security risks.

Furthermore, you must also implement Transport Layer Security overtop of your application, doubling the complexity as now you must rewrite your code for OpenSSL.

## What makes your socket library different?
My socket library provides nearly everything you need to get a reliable, performant, and secure socket server up and running within seconds. Any code that is repetitious is functionized and automated for the best development experience possible. 

Furthermore, my socket library makes use of a thread pool that uses my own stepwise algorithm to automatically scale whenever necessary.

# The developer experience.
My server socket library provides an excellent foundation that is able to be started in just seconds with little to no effort. Fill out the parameters structure, pass it to the context generator, write a payload function, and then listen using that context and pass it the payload function. As soon as a user connects, the server handles the negotiations, your payload function is executed, and then the server closes the connection automatically.

# My plans for the future.
From my ventures in this project, I learned about thread pools which has inspired me to create my own scalable performant thread pool framework.7:Tc5b,
# What is the purpose of a memory allocator?
A memory allocator traditionally refers to a library that abstracts the process of heap management to a program. A program uses a memory allocator to allocate a specific number of bytes from the kernel to store data it needs later.

The program expects that the pointer to the segment of memory will never change unless requested by the program to do so.

## What's a heap, and what's a segment?
The heap is a pile of segments that grows upward toward the stack. It is composed of any integer multiple of the size of a page, typically 4 kilobytes.

On most architectures, the minimum page size is 4 kilobytes and can't be smaller or larger. The kernel lends programs to these pages whenever they need to store data in memory.

You may allocate a page of any size from the Linux kernel, but you'll run into significant performance and fragmentation issues at the kernel level sooner or later. So, only allocate integer multiples of the page size from the kernel.

A segment is just a slice of the heap that a program allocates to store data. It may be any number of bytes and isn't restricted to being an integer multiple of the page size.

# How is your memory allocator different?
Traditionally, many applications on Linux-based operating systems use the ```glibc malloc```, which has prided itself on being balanced in performance and efficiency. However, the ```glibc malloc``` codebase is complicated and immense, making it difficult for some to learn how a memory allocator is implemented in C.

My memory allocator was designed by a novice C programmer to be performant, efficient, and comprehensible. Its entire structure, including comments, is contained in 622 lines of code.

## Lazy operations.
My memory allocator uses lazy operations. These operations are reserved for computationally expensive functions that don't necessarily need to be run constantly. They've been delegated to run only when the counter that holds the number of calls to the operation has reached a certain threshold. Upon reaching this threshold, the operation executes, and the counter for the number of calls is subtracted by one.

These lazy operations significantly reduce latency on the majority of operations. However, if the thresholds for these lazy operations aren't balanced correctly, they may lead to more program memory usage.

## No arenas or binning.
Furthermore, my memory allocator doesn't use arenas or bins, which are common in many memory allocators. Arenas or bins work by processing and sorting free segments based on their sizes, then picking one and providing it to the program. However, arenas and bins add significant design complexity, so I've excluded them entirely from my memory allocator implementation.

# Is this production ready?
No, this memory allocator wasn't designed for production. Although I've ensured that it remains stable under various standard conditions, I'm sure that it is not as hardened or battle-tested as ```glibc malloc```.

This memory allocator is a learning tool that demonstrates what a simple yet fast and efficient memory allocator in the C programming language looks like.8:T8f5,
# What's your design criteria?
I wanted a personal website that could act as my blog, project portfolio, and biography and be flexible to customize and expand later.

I didn't want to reinvent the wheel either, and I didn't want to spend days getting my site up and running. Therefore, I needed to use an excellent template and fork it to customize it.

# What framework did you use?
At first, I wanted to use Nuxt. Still, I encountered considerable issues that made the development experience painful and slowâ€”from my personal experience, trying to use design systems like Preline was like pulling teeth.

Eventually, I landed on Nuxt's neighbor, Next.js, and I immediately fell in love with its simplicity, superb developer experience, and broad support. Furthermore, Next.js was natively supported by Vercel which made deploying my application a breeze.

# What template did you use?
Once I had decided on the framework I'd be using; I needed to find a flexible template that didn't require me to reinvent the wheel. 

After browsing GitHub, I landed on Magic Portfolio powered by Once UI. The design of Magic Portfolio was perfect, simple, and easy to modify to my liking.

# What do you plan on implementing in your fork?
I immediately got to work and forked Magic Portfolio. I made several changes, such as renaming tabs to make them more appropriate, trimming down some parts I didn't need, like password-protected routes, and writing a few project posts (including the one you're reading right now).

I plan to implement significant additions to modify the website's design and style. Specifically, I wish to alter the navigation bar to make it larger and a glassy blur. I also want to write more project posts on GitHub for all my finished projects.

# What did you use to deploy your website?
Vercel made deploying my website a dream. Previously, I used a virtual private server to host my applications; however, it was clunky and generally slower than I wanted.

Thankfully, Vercel exists. Vercel is a fantastic platform that allows you to deploy your application almost straight from your GitHub account. Push to central, and Vercel will take care of the rest by building and deploying your web application.

I also migrated over from Cloudflare to Vercel for my proxy solution.0:["Cya2OdRn5jr2LOYzlOuci",[[["",{"children":["projects",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["projects",{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"maxWidth":"m","children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"$3"}}],["$","$L2",null,{"fillWidth":true,"gap":"xl","marginBottom":"40","paddingX":"l","children":[["$","$L4","grid",{"priority":true,"href":"/projects/grid","images":["/images/gallery/grid.jpg"],"title":"Grid","description":"A distributed and centralized multithreaded computing system.","content":"$5","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/grid"}],["$","$L4","libsocket",{"priority":true,"href":"/projects/libsocket","images":["/images/gallery/libsocket.png"],"title":"libsocket","description":"A server socket library designed to make socket programming easier.","content":"$6","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/libsocket"}],["$","$L4","malloc",{"priority":false,"href":"/projects/malloc","images":["/images/gallery/malloc.jpg"],"title":"malloc","description":"A brief dive into the inner workings of heap allocators in the C programming language.","content":"$7","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/malloc"}],["$","$L4","bryceserv.is",{"priority":false,"href":"/projects/bryceserv.is","images":["/images/gallery/bryceserv.is.png"],"title":"bryceserv.is","description":"My personal website and portfolio.","content":"$8","avatars":[{"src":"/images/avatar.png"}],"link":"https://github.com/servisbryce/bryceserv.is"}]]}]]}],null],null],null]},[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","projects","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/15b9922eb12b1bb5.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/bf5abfa89ee118e0.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/a8c4e1ca9815a60e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/e578cf952a0222b2.css","precedence":"next","crossOrigin":"$undefined"}]],"$Lb"],null],null],["$Lc",null]]]]
d:I[1162,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Flex"]
e:I[6995,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"ToastProvider"]
f:I[124,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Background"]
10:I[9295,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Header"]
11:I[9890,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Route"]
12:I[2060,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Text"]
13:I[9316,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"Heading"]
14:I[7868,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-c697149f37922734.js","895","static/chunks/app/projects/page-90e4203fe9f645ea.js"],"IconButton"]
b:["$","$Ld",null,{"as":"html","lang":"en","background":"page","data-neutral":"slate","data-brand":"aqua","data-accent":"aqua","data-solid":"contrast","data-solid-style":"flat","data-theme":"dark","data-border":"conservative","data-surface":"translucent","data-transition":"all","className":"__variable_d65c78 __variable_bcf733","children":["$","$Le",null,{"children":["$","$L2",null,{"style":{"minHeight":"100vh"},"as":"body","fillWidth":true,"margin":"0","padding":"0","children":[["$","$Lf",null,{"mask":{"cursor":false,"x":0,"y":0,"radius":75},"gradient":{"display":false,"x":50,"y":0,"width":100,"height":100,"tilt":0,"colorStart":"brand-background-strong","colorEnd":"static-transparent","opacity":50},"dots":{"display":false,"color":"brand-on-background-weak","size":1,"opacity":100},"grid":{"display":true,"color":"brand-background-strong","width":"$undefined","height":"$undefined","opacity":100},"lines":{"display":false,"opacity":100}}],["$","$Ld",null,{"fillWidth":true,"minHeight":"16"}],["$","$L10",null,{}],["$","$Ld",null,{"position":"relative","zIndex":0,"fillWidth":true,"paddingY":"l","paddingX":"l","horizontal":"center","flex":1,"children":["$","$Ld",null,{"horizontal":"center","fillWidth":true,"minHeight":"0","children":["$","$L11",null,{"children":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L2",null,{"as":"section","fill":true,"center":true,"paddingBottom":"160","children":[["$","$L12",null,{"marginBottom":"s","variant":"display-strong-xl","children":"404"}],["$","$L13",null,{"marginBottom":"l","variant":"display-default-xs","children":"Page Not Found"}],["$","$L12",null,{"onBackground":"neutral-weak","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}]}]}],["$","$Ld",null,{"as":"footer","position":"relative","fillWidth":true,"padding":"8","horizontal":"center","mobileDirection":"column","children":[["$","$Ld",null,{"className":"Footer_mobile__TYNqJ","maxWidth":"m","paddingY":"8","paddingX":"16","gap":"16","horizontal":"space-between","vertical":"center","children":[["$","$L12",null,{"variant":"body-default-s","onBackground":"neutral-strong","children":"Published on April 27th, 2025."}],["$","$Ld",null,{"gap":"16","children":[["$","$L14","Email",{"href":"mailto:bryceservis@bryceserv.is","icon":"email","tooltip":"Email","size":"s","variant":"ghost"}],["$","$L14","Pretty Good Privacy",{"href":"/907873A1.asc","icon":"pgp","tooltip":"Pretty Good Privacy","size":"s","variant":"ghost"}],["$","$L14","Resume",{"href":"/resume.pdf","icon":"doc","tooltip":"Resume","size":"s","variant":"ghost"}],["$","$L14","GitHub",{"href":"https://github.com/servisbryce/","icon":"github","tooltip":"GitHub","size":"s","variant":"ghost"}],["$","$L14","LinkedIn",{"href":"https://www.linkedin.com/in/bryce-servis-328381357","icon":"linkedin","tooltip":"LinkedIn","size":"s","variant":"ghost"}]]}]]}],["$","$Ld",null,{"height":"80","show":"s"}]]}]]}]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"My projects."}],["$","meta","3",{"name":"description","content":"Read what projects Bryce Servis has been working on recently."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"My projects."}],["$","meta","7",{"property":"og:description","content":"Read what projects Bryce Servis has been working on recently."}],["$","meta","8",{"property":"og:url","content":"https://bryceserv.is/projects/"}],["$","meta","9",{"property":"og:image","content":"https://bryceserv.is/og?title=My%20projects."}],["$","meta","10",{"property":"og:image:alt","content":"My projects."}],["$","meta","11",{"property":"og:type","content":"website"}],["$","meta","12",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","13",{"name":"twitter:title","content":"My projects."}],["$","meta","14",{"name":"twitter:description","content":"Read what projects Bryce Servis has been working on recently."}],["$","meta","15",{"name":"twitter:image","content":"https://bryceserv.is/og?title=My%20projects."}],["$","meta","16",{"name":"next-size-adjust"}]]
1:null
