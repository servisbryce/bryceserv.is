2:I[8047,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"Column"]
3:I[9316,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"Heading"]
4:I[5094,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"Grid"]
5:I[7659,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"default"]
f:I[4707,[],""]
10:I[6423,[],""]
6:Tffa,
# What's a smartcard?
By definition, a smartcard is just any card that possesses an embedded chip within its frame. However, the types of smartcards that we'll be primarily focusing on are capable of running Java. These smartcards, or "Java Cards" by Oracle, are extremely powerful embedded computers capable of secure yet straightforward and portable operations at scale.

These Java Cards are unlike any other portable computer because they have absolutely zero direct user interface; instead, they interact with other computers through surface contact on flat gold plates. Almost all of the time, the user has no idea that the smartcard they're using to perform various tasks is an embedded microcomputer that permits even those without experience operating a computer to use it. Moreover, they're incredibly robust as these chips are resistant to most forms of accidental damage, such as water damage and some instances of crushing.

# What are the applications of smartcards?
The original purpose of smartcards was to secure and isolate sensitive information, such as cryptographic secrets, within the chip. However, these smartcards have become an assortment of consumer products, such as credit cards, SIM cards, on-premise access control, and even vaccination verification cards during the COVID-19 pandemic.

# Smartcards and cryptography.
The most prominent use of smartcards is in securing cryptographic secrets such as private keys. By isolating your private keys on a smartcard, you can make them virtually unattainable by all digital attack vectors and most physical attacks. This security is thanks to the private key never having to leave the smart card; instead, all cryptographic operations are performed on the smart card directly, so the private key cannot be sniffed by software or hardware. However, one flaw in most smartcards for storing cryptographic secrets is the entropy problem. Entropy is just the mathematical randomness of random data within the Java Card computing apparatus.

## The Entropy Problem.
Randomness, or entropy, is a significant problem with Java cards in terms of cryptography. Java Cards are almost entirely isolated from the physical and digital world surrounding them; however, this isolation completely invalidates all randomness that could be generated on the Java Card. Statistically speaking, the dataset that the Java Card could use to generate randomness could be so predictable that an adversary could profile the randomness and regenerate private keys stored inside of the card outside of it. 

To combat the entropy problem, we recommend generating these keypairs outside of the Java Card on another device with sufficient entropy for unpredictable private key generation.

However, you must export these secrets from the device onto the Java Card; thus, the security of the Java Card is defeated for the duration of the transfer. So, this other device must be air-gapped (not connected to anything) and attestable (there isn't any malware or hardware tampering). Once you've transferred the keys, you must also completely erase all traces of these secrets from the other device so they only exist on the smartcard.

# My conclusion.
Smartcards are extremely useful for cryptography, and I use them to secure my sensitive data (through my Yubikey). They aren't perfect. However, there is no better alternative. A smartcard capable of generating reputable randomness would fix these issues and create a virtually ideal way to isolate and secure sensitive cryptographic secrets. In the past, you've seen standards such as [NIST SP 800-90A](https://en.wikipedia.org/wiki/NIST_SP_800-90A) (a random number generator implemented on some high-end smartcards) be subject to immense scrutiny due to their suspected government-implemented backdoors. Ultimately, much trust has been taken away from smartcards due to their vast corporate and governmental interest. Unfortunately, This technology is swamped with patents, intellectual property overreach, and closed-source software, leading to immense distrust by developers and users alike.7:T5d5,
# Loosening the earth.
If we even wish to consider doing anything with this land, we must loosen up the soil. This patch of land has completely dried because there wasn't any vegetation covering the soil underneath, thus leading to the ground drying out and becoming even more inhospitable to life. I used a twist tiller in a grid pattern across the entire patch of the land to loosen up the soil so we could remove a layer of topsoil and replace it with more hospitable earth. After about an hour of tilling, the earth was finally loose enough to be shoveled.

![A better wasteland.](/images/gallery/gardentilled.png)

# Removing the topsoil.
This patch of land was sprayed with potent pesticides and poisons a few years ago when it was overrun by weeds. Removing about an inch of topsoil from the loosened earth should negate any long-term effects of the poison. I could dig a few inches deeper, but that feels a bit excessive because it has been many years since the poison was sprayed. I used a shovel to dig out a few wheelbarrows of "contaminated" topsoil from the plot.

![A improved wasteland.](/images/gallery/gardenshovel.png)

# Leveling the land.
To level the land, I used a rake to spread out the loose bottom layer of soil around to flatten it as much as possible. I'm planning on irrigating the plot soon to make it more hospitable. Overall, this project took around two to four hours, and I'm delighted with the results.

![Final product.](/images/gallery/gardenflattened.png)8:T7c3,
# What are soft skills?
Soft skills are your ability to interact with those around you effectively and cooperatively. There is a wide variety of soft skills, from your ability to communicate your ideas to resolving conflict. Generally, any skill you'll need to work effectively in a collaborative environment with others is a soft skill.

# Why do soft skills matter?
Soft skills are necessary to promote a friendly, collaborative environment where everyone can work together to accomplish a shared goal or mission. Employers are increasingly seeking those with superb soft skills as the work landscape shifts toward a more collaborative environment built on teamwork, communication, and emotional intelligence to drive collective growth and success in the modern world. 

We're more interdependent on other people than ever, making soft skills increasingly sought after to ensure success through teamwork. The increased interdependency in modern work has and will continue to improve productivity exponentially. However, a new set of soft skills hasn't traditionally been spotlighted until recently, as we've seen the rise of collaborative work environments demand team members driven by collective success rather than individual triumphs.

You don't have to be the best at a particular trade or skill. For example, you may not be the best programmer on your team, but if you possess the soft skills to work effectively with the rest of your team, that will undoubtedly make up for it collectively. If people love working with you, then the team as a whole will grow and succeed together. Although you should not be mediocre at your trade, soft skills are more prevalent than they used to be, especially in today's work environment. Your ability to work, learn, and collaborate with others is one of the most essential skills you could have going into the market today. 

You don't have to be the best at what you do, but if people love to work with you, that makes all the difference.9:Tf02,
# Why do you need to execute external machine code at runtime dynamically?
I am designing a distributed computing system in which raw machine code is sent over a network for a worker peer to execute and transmit the result to the requester. The architecture in which the library file is compiled for is assumed to match the architecture of the worker peers. However, there was a significant roadblock in the development of said system: how would I dynamically run external machine code at runtime? The function signatures are to remain the same per the agreed protocol of the distributed computing system (the function signature takes a void pointer parameter and returns a void pointer parameter). I initially tried to read raw object files and execute them at runtime, which was not in the scope of my project because I soon realized I was trying to build a dynamic library loader. Thankfully, Linux has a fantastic dynamic library loader called ```dlfcn``` that does all the heavy lifting for us.

# The dynamic library loader.
The dynamic library loader, in short, reads a ```.so``` file and disassembles it. Then, pick and prod in the library for the function name you wish to execute. The dynamic library loader will automatically pull the machine code for said function from the shared object file and make it accessible via a function call. All that's left is to perform some casting to indicate that the pointer you just pulled out of the dynamic library loader is a function you can call (you must also specify parameters).

The entire process may be summed up like this.
```c
/* Open the shared object file. */
void *dynamic_library_context = dlopen("./mylibrary.so", RTLD_LAZY);

/* Create the function signature. */
void *(*myfunction)(void *myfunction_vargs_p);

/* Rummage through the shared object file to find a function called myfunction. 
   Then, load the machine code for that function into memory and output a pointer 
   to it. Finally, assign said pointer to the function signature we created
   earlier so the program knows this is a function call and not just a regular pointer. */
*(void **)(&myfunction) = dlsym(dynamic_library_context, "myfunction");

/* Call our newly created function! */
myfunction(NULL);
```

# What are the advantages and disadvantages of doing this?
There are many advantages to using the dynamic library loader compared to just blatantly running machine code you found in an object file. Using the dynamic library loader isn't as janky compared to loading external object files into memory and executing them haphazardly. The dynamic library loader is a battle-tested way to manage external functions rather than trying to roll your loader. There are also some unintentional benefits to using this approach to dynamically run external code at runtime, such as increased memory efficiency and smaller binaries.

However, some significant disadvantages make this approach undesirable to some who may opt to use just-in-time compilation as an alternative. In general, the dynamically linked loader blindly allows you to import and execute libraries without oversight. The lack of oversight makes dynamic library loading extremely powerful and modular. However, it poses a significant security vulnerability as the library may be malicious or injected with malicious machine code that could easily compromise your system. Moreover, you must explicitly define the function signatures you use in the library, as you can't readily determine what parameters a function takes by just looking at its machine code (this is why header files exist for libraries). However, a solution to this is having all your library functions input and output void pointers. These void pointers may be used to point toward any piece of data (such as a structure containing an assortment of second-layer parameters).a:Tbb4,
# What is structured data transmission?
Structured data transmission is a way to transfer serialized data over the Internet in a structured manner. The Internet is built for data transfer; however, various protocols have limitations that must be worked around to compensate for multiple scenarios.

# The maximum transfer buffer.
There is a maximum transfer buffer for all sockets. The maximum transfer buffer length differs between programs and protocols, but generally, the agreed-upon maximum size is sixty-four megabytes. This transfer buffer limit means you can only write data smaller than or equal in length to the buffer transfer limit.

# Chunked data transfer.
A way to get around the maximum transfer buffer is by slicing our data transmission into several sequential chunks. We evenly divide our completed data by the maximum data transfer buffer limit and then mark each chunk with what part of the sequence it is. Then, the client reconstructs and reorders the data transmission using the segments received from the peer. 

# Serialization.
Serialization is storing complex objects, like structures, in a standardized manner, typically for ease of use. When transferring data, the Internet has little to no concept of data structures specific to one language. For portability and accessibility, we serialize these structures and encode their data into long strings that we can reconstruct on another machine. Serialization dramatically simplifies the transfer of structures between machines. However, there are some downsides to using serialization. Serialization is slow as it involves a lot of decoding, encoding, and translation from string to structure. Serialization also possesses substantial security overhead because you must interact with countless buffers, strings, and user-inputted data. You should generally use a trusted and battle-tested serialization library unless you are sure what you are doing. 

# Alternatives to serialization.
Alternatively, if you don't want to serialize your structures, you can always write the raw memory from the structures over the Internet. You shouldn't do this because of portability concerns due to each language usually having its own unique schema for storing data. However, it is an option that is available to you. You'd need to demark the structure of the object so the program will know what structure you're trying to create. Then, you should demark the data length inserted into that structure. Lastly, after you've demarked the previous two pieces of metadata, you should append your raw data. Then, repeat for all the fields of your structure. Whenever a peer receives this data, it must first understand what kind of structure you're creating, and it will figure this out by using the demarkation you put in your transmission earlier. Then, it will find the length demarkation and then read the specified amount of bytes after that length demarker. It will repeat these last two steps for the remaining transferred data.b:T1189,
# What is a dynamic thread pool compared to a static thread pool?
A static thread pool is an effective and flexible way to parallelize any task. It has an unchanging number of threads in a structure called a pool. A program may assign functions to these pools, and a thread will elect to compute an assigned function.

On the contrary, a dynamic thread pool follows the same notion, except the number of threads in the pool may contract or expand depending on the program's priorities and preferences. A dynamic thread pool is significantly more scalable than a static one because if it becomes overloaded with tasks, it may request more threads to accommodate the increased load and then kill these threads when the load eventually decreases.

# When should a dynamic thread pool be used?
A dynamic thread pool should be used whenever the workload is unpredictable. Unpredictable workloads are typical in many types of applications, especially in applications that serve requests (servers). The ability for a thread pool to scale dynamically to accommodate an elevated but unanticipated demand is a much-preferred alternative to outright denying requests. However, there must be limits to prevent the dynamic thread pool from endlessly scaling itself up until it starts to overload the underlying operating system it's running on. Furthermore, the dynamic thread pool must also know when it's appropriate to scale down to prevent an excess of threads from accumulating that aren't going to be used.

# What algorithms determine when to scale a dynamic thread pool?
The stepwise scheduling algorithm is a standard method for determining when and how to scale dynamic thread pools. The stepwise scheduler is a straightforward yet effective way to scale the dynamic thread pool based on existing usage data without involving complex analysis. You must set a baseline thread target, regularly telling the algorithm the number of threads it wants in the pool whenever possible. Then, you must place a maximum for how many threads may be in the dynamic thread pool. Otherwise, you risk the dynamic thread pool from scaling up too much and taking down the entire operating system. The dynamic pool may not scale more than the maximum thread target. Finally, you must set a stepwise thread amount that tells the dynamic thread pool how much it should expand whenever it is at maximum load; the stepwise thread amount should be about 10% of the thread target and remain constant. However, your needs may change depending on your application.

The stepwise scheduling algorithm assumes that whenever the thread pool is overloaded, instead of expanding the pool by the minimum amount necessary to accommodate the demand at that moment, it should overallocate the number of threads to accommodate for an increased trend in demand over a prolonged period. Stepwise scheduling is helpful for applications such as servers that often experience protracted periods of unanticipated traffic.

# What are the tradeoffs for using a dynamic thread pool rather than a static thread pool?
A static thread pool never has to worry about the performance impact of creating or killing threads, as it only has to make them once. However, when overloaded, a static thread pool is forced to deny requests rather than serve them, which leads to unreliability in your application during exceptionally high loads.

Furthermore, suppose the dynamic thread pool is misconfigured. In that case, it may expand too aggressively and lead to system instability, resulting in requests being denied or the program outright crashing due to it starving from a lack of resources.

However, a properly configured and supervised dynamic thread pool is a scalable alternative to outright denying requests and disrupting others. It's a much more favorable alternative to scale up temporarily to accommodate prolonged bursts in traffic than to turn away empty-handed users.

Dynamic thread pools should not be used for applications with a constant or predictable workload, such as payroll or file backup systems. However, applications that have an unpredictable workload, such as web servers or streaming platforms. The dynamic thread pool must be configured to accommodate the balancing act between stability and raw processing power. If balanced improperly, the dynamic thread pool may cause the application to become unstable and prone to crashing. However, balancing this tradeoff is easy using the abovementioned stepwise algorithm.c:T907,
# Should I trust code generated by artificial intelligence?
Absolutely not, because artificial intelligence doesn't have the reasoning capabilities that you do. On numerous occasions, when I've experimented with artificial intelligence to see its programming capabilities, it often shipped broken, nonsensical code full of vulnerabilities and depreciated functions. You should treat all code generated by artificial intelligence as untrusted and unsafe.

You should always avoid copying code from artificial intelligence and throwing it directly into your program unless you're certain precisely what it's doing and why it's there.

# What should I use artificial intelligence for?
Artificial intelligence is exemplary at finding and recognizing patterns in data. This trait makes it incredibly good for debugging programs because it can match debugging data with its immense dataset and determine what might have happened. For example, I once encountered an extremely vague OpenSSL error, and there weren't any results on Google for it, so I couldn't figure it out and was stumped. However, when I asked artificial intelligence what the error may be caused, it provided an excellent synopsis that cleared up the vague error message and allowed me to patch the bug.

# What shouldn't I use artificial intelligence for?
Do not use artificial intelligence mindlessly. You must understand precisely what it's doing and saying because artificial intelligence cannot tell if it's saying is correct or not. Even though artificial intelligence is trained on massive datasets, you are still more intelligent than it because you can discern what is proper and what is false. You shouldn't use artificial intelligence for tasks you don't understand yourself. Instead, you should teach yourself the topic and learn it, then use artificial intelligence later as an assistant and not an expert. You should become an expert and use artificial intelligence to automate tasks that waste your time, then audit what the artificial intelligence outputs and make corrections.

In short, you shouldn't rely on artificial intelligence to be an expert for you; instead, you should use it like an assistant. You should become the expert and audit, modify, and adjust whatever outputs are spewed from the artificial intelligence model.d:T2cf5,
# Which security measures should I implement?
Several techniques, ranging in complexity, can strengthen the security of your virtual private server. Implementing basic security measures to harden the security of your virtual private servers will prevent most attackers from infiltrating your server. However, you may wish to implement more sophisticated security measures to thwart skilled malicious actors from trying to break into your servers.

Depending on your threat model, you should implement either the baseline security measures or the baseline and advanced security measures.

# Baseline Security Measures
These baseline security measures should be followed on any machine where applicable. They are sufficient to stop the overwhelming majority of attackers and automated malicious bots on the Internet.

## Enable your firewall.
Simply said, you need a firewall. If you have any machine facing the Internet Internet, you should always run a firewall solution on it and upstream in the network, if applicable. A firewall can effectively prevent attackers from accessing ports on your server that you did not intend to be accessible.

My favorite solution for firewalls on Linux is ```ufw```.

On Debian Linux, you can install ```ufw``` using the following command.

```bash
sudo apt install ufw
```

Once installed, allow port ``22``, the ```SSH``` default port, to prevent locking yourself out of your server. You may do so using the following command.

```bash
sudo ufw allow 22
```

Using the following command, you may check which processes and ports are listening on your machine.

```bash
ss -lpnt
```

Ensure that if you intend for any ports to be accessible by others on the Internet, you allow them by using the command that allows port ``` 22 ``` access.

Once you've allowed the ports you wished to be accessible by anybody on the Internet, please double-check your changes before reloading your firewall. You may do so using the following command.

```bash
ufw status
```

Once you've reviewed your firewall ruleset, you may apply them to your server using the following commands.

```bash
ufw reload
ufw enable
```

Congrats, you now have a firewall protecting your server!

## Stop using ```root``` as your default user!
Stop immediately if you are using ```root``` as your default user. Using ```root``` as your default user is extremely dangerous because processes running under root effectively have access to your entire server. Instead, you should create another user with ```sudo``` privileges. Whenever you need ```root``` permissions to do something, you should invoke those permissions temporarily using ```sudo```.

As ```root``` on Debian Linux, use these commands to create a new user, set their password, and grant them access to escalate privileges safely using ```sudo```.

```adduser``` creates a new user on Debian Linux, designates their password, and creates their home directory.

```bash
adduser exampleuser
```

Now, grant ```exampleuser``` the ```sudo``` group which will permit them to use the ```sudo``` utility to safely escalate privileges temporarily through the shell.

```bash
usermod -a -G sudo exampleuser
```

We're not done yet, though. Ensure that the ```sudo``` group is permitted to use ```sudo``` by checking ```/etc/sudoers```.

It's best practice to use ```visudo``` to edit ```/etc/sudoers```. However, you may use any text editor to read and/or edit the file.

If you don't see this line in your ```/etc/sudoers```, make sure you add it so ```sudo``` works! If you see the line but it's commented out, please ensure that you uncomment it so it looks exactly like the text below.

```bash
%sudo ALL=(ALL) ALL
```

You may now switch to your newly created user using the following command.

```bash
su exampleuser
```
## Hardening the Secure Shell
Are you using password authentication to log into your server over ```SSH```? If you are, you are at a significantly high risk for automated bots trying to compromise your server by brute force your password from many different ```IP addresses```. Malicious actors often create bots that scan the Internet for servers with open ```SSH``` ports, like yours! Once they've discovered that you have an open ```SSH``` port, they will spam thousands of commonly used passwords until they get into your server. Humans are inherently flawed when generating unique, memorable, and strong passwords. Thankfully, there's a better way to authenticate yourself.

Through the power of ```SSH``` authentication keys, you can automatically log into your server remotely using the power of encryption.

You may generate a unique ```ED25519 SSH``` keypair using the command below. ```ED25519``` is regarded as one of our strongest, fastest, and most efficient elliptic curve signing algorithms available.

Also, whenever you generate this keypair, please set a password during the interactive prompt to protect your private key. Otherwise, somebody with access to your user or disks could pull your keypair and use it as if they were you!

```bash
ssh-keygen -t ed25519
``` 

Now that you've created a keypair, we must copy your public key to your server. Thankfully, ```SSH``` already has a utility for this! Use the command below to transfer your public keys to your server.

```bash
ssh-copy-id -i ~/.ssh/id_ed25519.pub exampleuser@yourserverip
```

After setting up your public key authentication on your server, try logging in.

```bash
ssh exampleuser@yourserverip
```

Enter your private key decryption password if you set one. Did you notice anything different? You didn't have to enter your remote user's password. Pure magic. Now that public key authentication is working let's harden your ```SSH``` configuration.

You may use the command below to peek at your ```SSH``` configuration.

```bash
sudo nano /etc/ssh/sshd_config
```

First, disable ```root``` logins. Since you set up a default user with ```sudo``` privileges, you shouldn't allow remote logins to ```root```. Make these exact changes to the file.

```bash
#LoginGraceTime 2m
PermitRootLogin no
#StrictModes yes
```

Next, explicitly enforce public key authentication. Make these exact changes.

```bash
#MaxSessions 10

PubkeyAuthentication yes
```

Because of the flaws above, we should no longer use password authentication. Therefore, we will also prohibit all authentication via passwords. Make these changes.

```bash
PasswordAuthentication yes
#PermitEmptyPasswords no
```

Now, double-check your edits to ensure that you've made them correctly. Save and close the file once you've ensured they're implemented correctly. Restart the ```SSH``` daemon.

```bash
systemctl restart sshd
```

Then close the ```SSH``` connection.

Now, log in again using the following command.

```bash
ssh exampleuser@yourserverip
```

If you set a private key, you should be prompted to type the password. Once you've decrypted it, you should be dropped into the shell on your server. If you didn't and you made a mistake, please fix it by using a ```KVM-over-IP``` solution that your hosting provider has provided you.

## Change your root password.
On the majority of hosting platforms, they assign a randomly assigned password to your ```root``` user upon installation of your server. It's generally good practice to change this password to a unique, random, and secure password of your choice.

Generate a password using a utility like ```pwgen``` and then store it in your password manager. The longer and more random your password, the more secure it'll be.

Next, escalate into your ```root``` user from your default user using this command.

```bash
sudo su
```

Now that you've escalated into your ```root``` user, execute this command to change their password.

```bash
passwd
```

The interactive prompt will ask you to change your root password twice to ensure you've entered it correctly.

### I accidentally pasted my password into the shell.
Make sure you always understand and look at what commands you're executing. However, mistakes do happen. If you entered your password mistakenly as a command into the ```bash shell```, then this will be kept in the ```.bash_history``` file.

Thankfully, there's an easy utility to permanently erase this mistake from your server's disk. Run the following command.

```bash
shred --zero --remove ~/.bash_history
```

This command will effectively permanently erase the data and make it unrecoverable by most, if not all, disk forensics software.

# Advanced security measures.
Assuming that you've completed the baseline security measures, you may want to implement more advanced security measures to stop even the most sophisticated attackers from breaking into your server. These steps aren't easy and require an extremely careful and tailored installation.

## Implement service controls.
An extremely effective way to prevent malicious actors from breaking into your system is not only to shut the door but to also put up a privacy fence that they cannot see through or traverse. In simplest terms, an attacker can't attack you if they cannot reach the resources they need to launch their attack!

There are two effective methods of doing this.

### Firewall-based service controls.
You may use the ```ufw``` firewall that we set up earlier to permit only certain ```IP addresses``` to connect to your servers ```SSH``` port.

If your internet service provider doesn't provide static ```IP address``` reservations to its customers, I would caution against this, as you may unintentionally lock yourself out of your server without getting back in.

First, find all your existing ```SSH``` rules in your firewall ruleset.

```bash
sudo ufw status numbered
```

Next, delete the rule(s) you selected from your ruleset by issuing this command. Be aware that the numbers mentioned by ```ufw``` above will decrease by one every time you delete a rule if the deleted rule comes before the other rules.

```bash
sudo ufw delete X
```
Now, add your new rule for your ```SSH``` port in ```ufw``` to only allow your ```IP address``` to connect.

```bash
sudo ufw allow from yourIPv4address proto tcp to any port 22
```

Check your firewall ruleset once again to ensure that the change you made was correct. Then, reload your firewall ruleset to rectify the changes.

```bash
sudo ufw reload
```

Now reconnect to your server over ```SSH```. The connection should've successfully gone through. However, if you made a mistake somewhere, you should use the built-in recovery console of your server through your hosting provider to revert these changes.

### Creating your own intranet.
Many hosting providers offer virtual private clouds, which are essentially shared private networks that machines can talk to each other privately on. So, hypothetically, if we add a server to this private network that has a ```Wireguard VPN``` that translates traffic from your home computer into traffic on the private network, you could log into your machines without even having these ports face the Internet. You'd have to firewall ```SSH``` to only be accessible from the private network interface on your servers.

This is an extremely complicated endeavor that I will write a guide on in another edition. However, it's the most secure, convenient, and adaptable method by far. You may also apply this to other services that you only want a few trusted people to access, such as ```IMAP``` (an email retrieval protocol).

I personally use and endorse this method for those who are able to implement it correctly.e:T995,
# Why move away from Vercel?
Vercel is an outstanding platform on which to deploy your Next web applications. However, it conflicts with my wish to start self-hosting my websites and services for digital sovereignty. Vercel is a fantastic website deployment platform, but that's about it. It's annoying and difficult to integrate with other services.

## What will take Vercel's place?
I'm replacing Vercel with virtual private servers from my favorite cloud provider, Vultr. From my personal experience over the past few years, Vultr hasn't caused me any issues other than blocking outbound traffic on ports that spammers use.

# Rolling my own infrastructure.
My infrastructure is straightforward. I will deploy a virtual private server, statically generate my website, and upload those statically generated files to my server. I'll then host the files using ```nginx```.

## Why not just reverse proxy your application instead of statically generating it and hosting it directly?
My application doesn't rely on fetching data and rendering it into the page because it's a blog and portfolio site. Therefore, deploying the statically generated files and hosting them directly using ```nginx``` is logically easier.

# Porting my Next application for static site generation.
I had to change Next's configuration to port my application to a static deployment environment.

The two additions were the output and image parameters. The output parameter must be set for Next to generate the necessary files for directly hosting the website, and the image parameters were required to prevent Next from making broken image requests.

I then built my application and pushed the outputs straight to GitHub.

# My deployment.
Once my virtual private server was hardened, I opened a shell on the server and pulled down the repository where my application was stored. I pointed ```nginx``` to the output directory in my pulled repository. Everything was working exceptionally well.

# Update as of March 24th, 2025.
I have somewhat dodged a bullet. Vercel and Next were hit with a critical vulnerability that permitted users to bypass middleware. Despite the critical vulnerability, it wouldn't have affected me when I was using Vercel because my web application doesn't rely on middleware for anything mission-critical.

Regardless, this vulnerability didn't affect me because I self-hosted this website using static server generation on a virtual private server.0:["IjD5Jf9R3y4a3Z0D0FBAE",[[["",{"children":["blog",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"maxWidth":"s","children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"Blog\",\"headline\":\"My blog.\",\"description\":\"Read what Bryce Servis has been up to recently.\",\"url\":\"https://bryceserv.is/blog\",\"image\":\"bryceserv.is/og?title=My%20blog.\",\"author\":{\"@type\":\"Person\",\"name\":\"Bryce Servis\",\"image\":{\"@type\":\"ImageObject\",\"url\":\"bryceserv.is/images/avatar.png\"}}}"}}],["$","$L3",null,{"marginBottom":"l","variant":"display-strong-s","children":"My blog."}],["$","$L2",null,{"fillWidth":true,"flex":1,"children":["$","$L4",null,{"columns":"1","mobileColumns":"1","fillWidth":true,"marginBottom":"40","gap":"m","children":[["$","$L5","findingbalance",{"post":{"metadata":{"title":"Finding Balance","publishedAt":"2025-05-18","summary":"Achieving balance in your life isn't easy, but balancing all aspects of your life to the best of your ability is the most important way to keep yourself well.","image":"/images/gallery/findingbalance.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"findingbalance","content":"\n# You must balance your life, work, and hobbies as best you can.\nTo live well, you must balance your life, work, and hobbies to the best of your abilities. I've recently been taken away from my projects as I spend more time with friends and family as the summer season rolls around, and I have a nagging demand in my head that I should be working on my projects, but I still shouldn't. While working on projects is essential and something I love doing, I cannot let it take over my time by sacrificing other aspects of my life for it. I must balance my time. Work is the foremost priority and is a non-negotiable aspect of my schedule; however, what I do in the hours that I have is something I must balance wisely. By overprioritizing one aspect of my life, I may miss other vital elements. Simply said, you have to manage your limited time wisely, or else you might miss out. You must balance your time outside work or school wisely to spend time with friends and family while also developing your hobbies and skills."},"thumbnail":true}],["$","$L5","themagicofsmartcards",{"post":{"metadata":{"title":"The Magic of Smartcards","publishedAt":"2025-05-05","summary":"The genius of smartcard technology and how their trust was compromised by closed-source corporations and government injuction.","image":"/images/gallery/themagicofsmartcards.png","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"themagicofsmartcards","content":"$6"},"thumbnail":true}],["$","$L5","preparingthegarden",{"post":{"metadata":{"title":"Preparing the Garden","publishedAt":"2025-04-27","summary":"Transforming a dead dry patch of land into a garden.","image":"/images/gallery/gardenflattened.png","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"preparingthegarden","content":"$7"},"thumbnail":true}],["$","$L5","theimportanceofsoftskills",{"post":{"metadata":{"title":"The Importance of Soft Skills","publishedAt":"2025-04-26","summary":"In a collaborative work environment, those with exceptional soft skills have become increasingly saught after by employers.","image":"/images/gallery/theimportanceofsoftskills.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"theimportanceofsoftskills","content":"$8"},"thumbnail":true}],["$","$L5","dynamicexecutionofexternalmachinecodeatruntime",{"post":{"metadata":{"title":"Dynamic Execution of External Machine Code at Runtime","publishedAt":"2025-04-15","summary":"The execution of external machine code at runtime is typically a difficult endeavour. However, there's a convenient and reliable way of doing this.","image":"/images/gallery/dynamicexecutionofexternalmachinecodeatruntime.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"dynamicexecutionofexternalmachinecodeatruntime","content":"$9"},"thumbnail":true}],["$","$L5","structureddatatransmission",{"post":{"metadata":{"title":"Structured Data Transmission","publishedAt":"2025-04-13","summary":"The various technologies and methods implemented to transmit data structures over the internet.","image":"/images/gallery/structureddatatransmission.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"structureddatatransmission","content":"$a"},"thumbnail":true}],["$","$L5","thecasefordynamicthreadpools",{"post":{"metadata":{"title":"The Case for Dynamic Thread Pools","publishedAt":"2025-04-06","summary":"The reasons why you should consider using dynamic thread pools in your applications.","image":"/images/gallery/thecasefordynamicthreadpools.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"thecasefordynamicthreadpools","content":"$b"},"thumbnail":true}],["$","$L5","whenshouldyouleverageartificalintelligence",{"post":{"metadata":{"title":"When Should You Leverage Artifical Intelligence in Programming?","publishedAt":"2025-04-03","summary":"The playbook on when to use artifical intelligence when programming.","image":"/images/gallery/whenshouldyouleverageartificalintelligence.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"whenshouldyouleverageartificalintelligence","content":"$c"},"thumbnail":true}],["$","$L5","securitymeasuresforavirtualprivateserver",{"post":{"metadata":{"title":"Security Measures for Debian Linux Servers","publishedAt":"2025-04-02","summary":"A series of best practices to secure your virtual private server.","image":"/images/gallery/securitymeasuresforavirtualprivateserver.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"securitymeasuresforavirtualprivateserver","content":"$d"},"thumbnail":true}],["$","$L5","migratingawayfromvercel",{"post":{"metadata":{"title":"Migrating Away from Vercel","publishedAt":"2025-03-23","summary":"The migration away from Vercel to my machines.","image":"/images/gallery/migratingawayfromvercel.png","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"migratingawayfromvercel","content":"$e"},"thumbnail":true}],["$","$L5","contactpreferences",{"post":{"metadata":{"title":"Contact Preferences","publishedAt":"2025-03-19","summary":"If you wish to contact me, please read this to ensure that you are able to communicate effectively with me.","image":"/images/gallery/contactpreferences.jpg","images":[],"tag":"Journal","team":[],"link":"","in_progress":false},"slug":"contactpreferences","content":"\n# What's your email?\nI am always available through email, and I regularly check it. You may reach me at ```bryce@bryceserv.is```, and I'll try to get back to you as soon as possible.\n\n## What if I need to disclose sensitive information to you?\nIf you wish to sign or encrypt your email to me, please click the key icon at the footer of this webpage to download my Pretty Good Privacy public key, which has the fingerprint ```8A2F92CF```.\n\nHowever, if your message isn't important or has no sensitive information, I don't recommend signing or encrypting it as it wastes both of our time.\n\n# Where else can I reach you?\nYou may contact me through LinkedIn if you wish.\n\nI don't give out contact details like phone numbers or ways to contact me on instant messengers unless you've contacted me over email or I know you before hand."},"thumbnail":true}]]}]}]]}],null],null],null]},[null,["$","$Lf",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L10",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/15b9922eb12b1bb5.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/8047f5601c99893d.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/a8c4e1ca9815a60e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/e578cf952a0222b2.css","precedence":"next","crossOrigin":"$undefined"}]],"$L11"],null],null],["$L12",null]]]]
13:I[1162,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"Flex"]
14:I[6995,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"ToastProvider"]
15:I[124,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"Background"]
16:I[9295,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","730","static/chunks/730-9aaad5245af3f756.js","931","static/chunks/app/page-d29d4e8e94a4d273.js"],"Header"]
17:I[9890,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","730","static/chunks/730-9aaad5245af3f756.js","931","static/chunks/app/page-d29d4e8e94a4d273.js"],"Route"]
18:I[2060,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"Text"]
19:I[7868,["665","static/chunks/f97e080b-0a86aaf10dbe59ce.js","957","static/chunks/30a37ab2-f9b0e5f411c3de6c.js","51","static/chunks/795d4814-6438406efdf40a17.js","240","static/chunks/53c13509-a05cf490bd1b4bdc.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","699","static/chunks/8e1d74a4-e83fb85827fce1d9.js","706","static/chunks/9c4e2130-dba83a693cd4808c.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-23a06fc4181dd628.js","404","static/chunks/app/blog/page-3ab1b11c8e267d6a.js"],"IconButton"]
11:["$","$L13",null,{"as":"html","lang":"en","background":"page","data-neutral":"slate","data-brand":"emerald","data-accent":"aqua","data-solid":"contrast","data-solid-style":"flat","data-theme":"dark","data-border":"conservative","data-surface":"translucent","data-transition":"all","className":"__variable_d65c78 __variable_bcf733","children":["$","$L14",null,{"children":["$","$L2",null,{"style":{"minHeight":"100vh"},"as":"body","fillWidth":true,"margin":"0","padding":"0","children":[["$","$L15",null,{"mask":{"cursor":false,"x":0,"y":0,"radius":75},"gradient":{"display":false,"x":50,"y":0,"width":100,"height":100,"tilt":0,"colorStart":"brand-background-strong","colorEnd":"static-transparent","opacity":50},"dots":{"display":false,"color":"brand-on-background-weak","size":1,"opacity":100},"grid":{"display":true,"color":"brand-background-strong","width":"$undefined","height":"$undefined","opacity":100},"lines":{"display":false,"opacity":100}}],["$","$L13",null,{"fillWidth":true,"minHeight":"16"}],["$","$L16",null,{}],["$","$L13",null,{"position":"relative","zIndex":0,"fillWidth":true,"paddingY":"l","paddingX":"l","horizontal":"center","flex":1,"children":["$","$L13",null,{"horizontal":"center","fillWidth":true,"minHeight":"0","children":["$","$L17",null,{"children":["$","$Lf",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L10",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L2",null,{"as":"section","fill":true,"center":true,"paddingBottom":"160","children":[["$","$L18",null,{"marginBottom":"s","variant":"display-strong-xl","children":"404"}],["$","$L3",null,{"marginBottom":"l","variant":"display-default-xs","children":"Page Not Found"}],["$","$L18",null,{"onBackground":"neutral-weak","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}]}]}],["$","$L13",null,{"as":"footer","position":"relative","fillWidth":true,"padding":"8","horizontal":"center","mobileDirection":"column","children":["$","$L13",null,{"className":"Footer_mobile__TYNqJ","maxWidth":"m","paddingY":"8","paddingX":"16","gap":"16","horizontal":"space-between","vertical":"center","children":[["$","$L18",null,{"variant":"body-default-s","onBackground":"neutral-strong","children":["Published on ","June 2, 2025"]}],["$","$L13",null,{"gap":"16","children":[["$","$L19","Email",{"href":"mailto:bryce@bryceserv.is","icon":"email","tooltip":"Email","size":"s","variant":"ghost"}],["$","$L19","Pretty Good Privacy",{"href":"/8A2F92CF.asc","icon":"pgp","tooltip":"Pretty Good Privacy","size":"s","variant":"ghost"}],["$","$L19","Resume",{"href":"/resume.pdf","icon":"doc","tooltip":"Resume","size":"s","variant":"ghost"}],["$","$L19","GitHub",{"href":"https://github.com/servisbryce/","icon":"github","tooltip":"GitHub","size":"s","variant":"ghost"}],["$","$L19","LinkedIn",{"href":"https://www.linkedin.com/in/bryce-servis-328381357","icon":"linkedin","tooltip":"LinkedIn","size":"s","variant":"ghost"}]]}]]}]}]]}]}]}]
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"My blog."}],["$","meta","3",{"name":"description","content":"Read what Bryce Servis has been up to recently."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"My blog."}],["$","meta","7",{"property":"og:description","content":"Read what Bryce Servis has been up to recently."}],["$","meta","8",{"property":"og:url","content":"https://bryceserv.is/blog/"}],["$","meta","9",{"property":"og:image","content":"https://bryceserv.is/og?title=My%20blog."}],["$","meta","10",{"property":"og:image:alt","content":"My blog."}],["$","meta","11",{"property":"og:type","content":"website"}],["$","meta","12",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","13",{"name":"twitter:title","content":"My blog."}],["$","meta","14",{"name":"twitter:description","content":"Read what Bryce Servis has been up to recently."}],["$","meta","15",{"name":"twitter:image","content":"https://bryceserv.is/og?title=My%20blog."}],["$","meta","16",{"name":"next-size-adjust"}]]
1:null
