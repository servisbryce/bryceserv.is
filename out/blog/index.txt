2:I[8047,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"Column"]
3:I[9316,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"Heading"]
4:I[5094,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"Grid"]
5:I[7659,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"default"]
9:I[4707,[],""]
a:I[6423,[],""]
6:T907,
# Should I trust code generated by artificial intelligence?
Absolutely not, because artificial intelligence doesn't have the reasoning capabilities that you do. On numerous occasions, when I've experimented with artificial intelligence to see its programming capabilities, it often shipped broken, nonsensical code full of vulnerabilities and depreciated functions. You should treat all code generated by artificial intelligence as untrusted and unsafe.

You should always avoid copying code from artificial intelligence and throwing it directly into your program unless you're certain precisely what it's doing and why it's there.

# What should I use artificial intelligence for?
Artificial intelligence is exemplary at finding and recognizing patterns in data. This trait makes it incredibly good for debugging programs because it can match debugging data with its immense dataset and determine what might have happened. For example, I once encountered an extremely vague OpenSSL error, and there weren't any results on Google for it, so I couldn't figure it out and was stumped. However, when I asked artificial intelligence what the error may be caused, it provided an excellent synopsis that cleared up the vague error message and allowed me to patch the bug.

# What shouldn't I use artificial intelligence for?
Do not use artificial intelligence mindlessly. You must understand precisely what it's doing and saying because artificial intelligence cannot tell if it's saying is correct or not. Even though artificial intelligence is trained on massive datasets, you are still more intelligent than it because you can discern what is proper and what is false. You shouldn't use artificial intelligence for tasks you don't understand yourself. Instead, you should teach yourself the topic and learn it, then use artificial intelligence later as an assistant and not an expert. You should become an expert and use artificial intelligence to automate tasks that waste your time, then audit what the artificial intelligence outputs and make corrections.

In short, you shouldn't rely on artificial intelligence to be an expert for you; instead, you should use it like an assistant. You should become the expert and audit, modify, and adjust whatever outputs are spewed from the artificial intelligence model.7:T2cf5,
# Which security measures should I implement?
Several techniques, ranging in complexity, can strengthen the security of your virtual private server. Implementing basic security measures to harden the security of your virtual private servers will prevent most attackers from infiltrating your server. However, you may wish to implement more sophisticated security measures to thwart skilled malicious actors from trying to break into your servers.

Depending on your threat model, you should implement either the baseline security measures or the baseline and advanced security measures.

# Baseline Security Measures
These baseline security measures should be followed on any machine where applicable. They are sufficient to stop the overwhelming majority of attackers and automated malicious bots on the Internet.

## Enable your firewall.
Simply said, you need a firewall. If you have any machine facing the Internet Internet, you should always run a firewall solution on it and upstream in the network, if applicable. A firewall can effectively prevent attackers from accessing ports on your server that you did not intend to be accessible.

My favorite solution for firewalls on Linux is ```ufw```.

On Debian Linux, you can install ```ufw``` using the following command.

```bash
sudo apt install ufw
```

Once installed, allow port ``22``, the ```SSH``` default port, to prevent locking yourself out of your server. You may do so using the following command.

```bash
sudo ufw allow 22
```

Using the following command, you may check which processes and ports are listening on your machine.

```bash
ss -lpnt
```

Ensure that if you intend for any ports to be accessible by others on the Internet, you allow them by using the command that allows port ``` 22 ``` access.

Once you've allowed the ports you wished to be accessible by anybody on the Internet, please double-check your changes before reloading your firewall. You may do so using the following command.

```bash
ufw status
```

Once you've reviewed your firewall ruleset, you may apply them to your server using the following commands.

```bash
ufw reload
ufw enable
```

Congrats, you now have a firewall protecting your server!

## Stop using ```root``` as your default user!
Stop immediately if you are using ```root``` as your default user. Using ```root``` as your default user is extremely dangerous because processes running under root effectively have access to your entire server. Instead, you should create another user with ```sudo``` privileges. Whenever you need ```root``` permissions to do something, you should invoke those permissions temporarily using ```sudo```.

As ```root``` on Debian Linux, use these commands to create a new user, set their password, and grant them access to escalate privileges safely using ```sudo```.

```adduser``` creates a new user on Debian Linux, designates their password, and creates their home directory.

```bash
adduser exampleuser
```

Now, grant ```exampleuser``` the ```sudo``` group which will permit them to use the ```sudo``` utility to safely escalate privileges temporarily through the shell.

```bash
usermod -a -G sudo exampleuser
```

We're not done yet, though. Ensure that the ```sudo``` group is permitted to use ```sudo``` by checking ```/etc/sudoers```.

It's best practice to use ```visudo``` to edit ```/etc/sudoers```. However, you may use any text editor to read and/or edit the file.

If you don't see this line in your ```/etc/sudoers```, make sure you add it so ```sudo``` works! If you see the line but it's commented out, please ensure that you uncomment it so it looks exactly like the text below.

```bash
%sudo ALL=(ALL) ALL
```

You may now switch to your newly created user using the following command.

```bash
su exampleuser
```
## Hardening the Secure Shell
Are you using password authentication to log into your server over ```SSH```? If you are, you are at a significantly high risk for automated bots trying to compromise your server by brute force your password from many different ```IP addresses```. Malicious actors often create bots that scan the Internet for servers with open ```SSH``` ports, like yours! Once they've discovered that you have an open ```SSH``` port, they will spam thousands of commonly used passwords until they get into your server. Humans are inherently flawed when generating unique, memorable, and strong passwords. Thankfully, there's a better way to authenticate yourself.

Through the power of ```SSH``` authentication keys, you can automatically log into your server remotely using the power of encryption.

You may generate a unique ```ED25519 SSH``` keypair using the command below. ```ED25519``` is regarded as one of our strongest, fastest, and most efficient elliptic curve signing algorithms available.

Also, whenever you generate this keypair, please set a password during the interactive prompt to protect your private key. Otherwise, somebody with access to your user or disks could pull your keypair and use it as if they were you!

```bash
ssh-keygen -t ed25519
``` 

Now that you've created a keypair, we must copy your public key to your server. Thankfully, ```SSH``` already has a utility for this! Use the command below to transfer your public keys to your server.

```bash
ssh-copy-id -i ~/.ssh/id_ed25519.pub exampleuser@yourserverip
```

After setting up your public key authentication on your server, try logging in.

```bash
ssh exampleuser@yourserverip
```

Enter your private key decryption password if you set one. Did you notice anything different? You didn't have to enter your remote user's password. Pure magic. Now that public key authentication is working let's harden your ```SSH``` configuration.

You may use the command below to peek at your ```SSH``` configuration.

```bash
sudo nano /etc/ssh/sshd_config
```

First, disable ```root``` logins. Since you set up a default user with ```sudo``` privileges, you shouldn't allow remote logins to ```root```. Make these exact changes to the file.

```bash
#LoginGraceTime 2m
PermitRootLogin no
#StrictModes yes
```

Next, explicitly enforce public key authentication. Make these exact changes.

```bash
#MaxSessions 10

PubkeyAuthentication yes
```

Because of the flaws above, we should no longer use password authentication. Therefore, we will also prohibit all authentication via passwords. Make these changes.

```bash
PasswordAuthentication yes
#PermitEmptyPasswords no
```

Now, double-check your edits to ensure that you've made them correctly. Save and close the file once you've ensured they're implemented correctly. Restart the ```SSH``` daemon.

```bash
systemctl restart sshd
```

Then close the ```SSH``` connection.

Now, log in again using the following command.

```bash
ssh exampleuser@yourserverip
```

If you set a private key, you should be prompted to type the password. Once you've decrypted it, you should be dropped into the shell on your server. If you didn't and you made a mistake, please fix it by using a ```KVM-over-IP``` solution that your hosting provider has provided you.

## Change your root password.
On the majority of hosting platforms, they assign a randomly assigned password to your ```root``` user upon installation of your server. It's generally good practice to change this password to a unique, random, and secure password of your choice.

Generate a password using a utility like ```pwgen``` and then store it in your password manager. The longer and more random your password, the more secure it'll be.

Next, escalate into your ```root``` user from your default user using this command.

```bash
sudo su
```

Now that you've escalated into your ```root``` user, execute this command to change their password.

```bash
passwd
```

The interactive prompt will ask you to change your root password twice to ensure you've entered it correctly.

### I accidentally pasted my password into the shell.
Make sure you always understand and look at what commands you're executing. However, mistakes do happen. If you entered your password mistakenly as a command into the ```bash shell```, then this will be kept in the ```.bash_history``` file.

Thankfully, there's an easy utility to permanently erase this mistake from your server's disk. Run the following command.

```bash
shred --zero --remove ~/.bash_history
```

This command will effectively permanently erase the data and make it unrecoverable by most, if not all, disk forensics software.

# Advanced security measures.
Assuming that you've completed the baseline security measures, you may want to implement more advanced security measures to stop even the most sophisticated attackers from breaking into your server. These steps aren't easy and require an extremely careful and tailored installation.

## Implement service controls.
An extremely effective way to prevent malicious actors from breaking into your system is not only to shut the door but to also put up a privacy fence that they cannot see through or traverse. In simplest terms, an attacker can't attack you if they cannot reach the resources they need to launch their attack!

There are two effective methods of doing this.

### Firewall-based service controls.
You may use the ```ufw``` firewall that we set up earlier to permit only certain ```IP addresses``` to connect to your servers ```SSH``` port.

If your internet service provider doesn't provide static ```IP address``` reservations to its customers, I would caution against this, as you may unintentionally lock yourself out of your server without getting back in.

First, find all your existing ```SSH``` rules in your firewall ruleset.

```bash
sudo ufw status numbered
```

Next, delete the rule(s) you selected from your ruleset by issuing this command. Be aware that the numbers mentioned by ```ufw``` above will decrease by one every time you delete a rule if the deleted rule comes before the other rules.

```bash
sudo ufw delete X
```
Now, add your new rule for your ```SSH``` port in ```ufw``` to only allow your ```IP address``` to connect.

```bash
sudo ufw allow from yourIPv4address proto tcp to any port 22
```

Check your firewall ruleset once again to ensure that the change you made was correct. Then, reload your firewall ruleset to rectify the changes.

```bash
sudo ufw reload
```

Now reconnect to your server over ```SSH```. The connection should've successfully gone through. However, if you made a mistake somewhere, you should use the built-in recovery console of your server through your hosting provider to revert these changes.

### Creating your own intranet.
Many hosting providers offer virtual private clouds, which are essentially shared private networks that machines can talk to each other privately on. So, hypothetically, if we add a server to this private network that has a ```Wireguard VPN``` that translates traffic from your home computer into traffic on the private network, you could log into your machines without even having these ports face the Internet. You'd have to firewall ```SSH``` to only be accessible from the private network interface on your servers.

This is an extremely complicated endeavor that I will write a guide on in another edition. However, it's the most secure, convenient, and adaptable method by far. You may also apply this to other services that you only want a few trusted people to access, such as ```IMAP``` (an email retrieval protocol).

I personally use and endorse this method for those who are able to implement it correctly.8:T995,
# Why move away from Vercel?
Vercel is an outstanding platform on which to deploy your Next web applications. However, it conflicts with my wish to start self-hosting my websites and services for digital sovereignty. Vercel is a fantastic website deployment platform, but that's about it. It's annoying and difficult to integrate with other services.

## What will take Vercel's place?
I'm replacing Vercel with virtual private servers from my favorite cloud provider, Vultr. From my personal experience over the past few years, Vultr hasn't caused me any issues other than blocking outbound traffic on ports that spammers use.

# Rolling my own infrastructure.
My infrastructure is straightforward. I will deploy a virtual private server, statically generate my website, and upload those statically generated files to my server. I'll then host the files using ```nginx```.

## Why not just reverse proxy your application instead of statically generating it and hosting it directly?
My application doesn't rely on fetching data and rendering it into the page because it's a blog and portfolio site. Therefore, deploying the statically generated files and hosting them directly using ```nginx``` is logically easier.

# Porting my Next application for static site generation.
I had to change Next's configuration to port my application to a static deployment environment.

The two additions were the output and image parameters. The output parameter must be set for Next to generate the necessary files for directly hosting the website, and the image parameters were required to prevent Next from making broken image requests.

I then built my application and pushed the outputs straight to GitHub.

# My deployment.
Once my virtual private server was hardened, I opened a shell on the server and pulled down the repository where my application was stored. I pointed ```nginx``` to the output directory in my pulled repository. Everything was working exceptionally well.

# Update as of March 24th, 2025.
I have somewhat dodged a bullet. Vercel and Next were hit with a critical vulnerability that permitted users to bypass middleware. Despite the critical vulnerability, it wouldn't have affected me when I was using Vercel because my web application doesn't rely on middleware for anything mission-critical.

Regardless, this vulnerability didn't affect me because I self-hosted this website using static server generation on a virtual private server.0:["i7bdlBfwZ2Ekg1WBzKtGo",[[["",{"children":["blog",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"maxWidth":"s","children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"Blog\",\"headline\":\"My blog.\",\"description\":\"Read what Bryce Servis has been up to recently.\",\"url\":\"https://bryceserv.is/blog\",\"image\":\"bryceserv.is/og?title=My%20blog.\",\"author\":{\"@type\":\"Person\",\"name\":\"Bryce Servis\",\"image\":{\"@type\":\"ImageObject\",\"url\":\"bryceserv.is/images/avatar.png\"}}}"}}],["$","$L3",null,{"marginBottom":"l","variant":"display-strong-s","children":"My blog."}],["$","$L2",null,{"fillWidth":true,"flex":1,"children":[["$","$L4",null,{"columns":"1","mobileColumns":"1","fillWidth":true,"marginBottom":"40","gap":"m","children":[["$","$L5","whenshouldyouleverageartificalintelligence",{"post":{"metadata":{"title":"When Should You Leverage Artifical Intelligence in Programming?","publishedAt":"2025-04-03","summary":"The playbook on when to use artifical intelligence when programming.","image":"/images/gallery/whenshouldyouleverageartificalintelligence.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"whenshouldyouleverageartificalintelligence","content":"$6"},"thumbnail":true}],["$","$L5","securitymeasuresforavirtualprivateserver",{"post":{"metadata":{"title":"Security Measures for Debian Linux Servers","publishedAt":"2025-04-02","summary":"A series of best practices to secure your virtual private server.","image":"/images/gallery/securitymeasuresforavirtualprivateserver.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"securitymeasuresforavirtualprivateserver","content":"$7"},"thumbnail":true}],["$","$L5","migratingawayfromvercel",{"post":{"metadata":{"title":"Migrating Away from Vercel","publishedAt":"2025-03-23","summary":"The migration away from Vercel to my machines.","image":"/images/gallery/migratingawayfromvercel.png","images":[],"tag":"Journal","team":[],"link":""},"slug":"migratingawayfromvercel","content":"$8"},"thumbnail":true}]]}],["$","$L4",null,{"columns":"2","mobileColumns":"1","fillWidth":true,"marginBottom":"40","gap":"m","children":[["$","$L5","contactpreferences",{"post":{"metadata":{"title":"Contact Preferences","publishedAt":"2025-03-19","summary":"If you wish to contact me, please read this to ensure that you are able to communicate effectively with me.","image":"/images/gallery/contactpreferences.jpg","images":[],"tag":"Journal","team":[],"link":""},"slug":"contactpreferences","content":"\n# What's your email?\nI am always available through email, and I regularly check it. You may reach me at ```bryceservis@bryceserv.is```, and I'll try to get back to you as soon as possible.\n\n## What if I need to disclose sensitive information to you?\nIf you wish to sign or encrypt your email to me, please click the key icon at the footer of this webpage to download my Pretty Good Privacy public key, which has the fingerprint ```907873A1```.\n\nHowever, if your message isn't important or has no sensitive information, I don't recommend signing or encrypting it as it wastes both of our time.\n\n# Where else can I reach you?\nYou may contact me through LinkedIn if you wish.\n\nI don't give out contact details like phone numbers or ways to contact me on instant messengers unless you've contacted me over email or I know you before hand."},"thumbnail":false}]]}]]}]]}],null],null],null]},[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/15b9922eb12b1bb5.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/8047f5601c99893d.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/a8c4e1ca9815a60e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/e578cf952a0222b2.css","precedence":"next","crossOrigin":"$undefined"}]],"$Lb"],null],null],["$Lc",null]]]]
d:I[1162,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"Flex"]
e:I[6995,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"ToastProvider"]
f:I[124,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"Background"]
10:I[9295,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","185","static/chunks/app/layout-2e0302613eb6e80e.js"],"Header"]
11:I[9890,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","185","static/chunks/app/layout-2e0302613eb6e80e.js"],"Route"]
12:I[2060,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"Text"]
13:I[7868,["665","static/chunks/f97e080b-42dcf4837ed6a86e.js","240","static/chunks/53c13509-59dce8ec7d519f72.js","212","static/chunks/59650de3-fde12c1ab0f67ea8.js","516","static/chunks/f7333993-771a495057fa5276.js","452","static/chunks/5e22fd23-52eff41f1e309e93.js","464","static/chunks/464-5b46459779776405.js","7","static/chunks/7-57938da051cc0a18.js","404","static/chunks/app/blog/page-567ebff99ff7b803.js"],"IconButton"]
b:["$","$Ld",null,{"as":"html","lang":"en","background":"page","data-neutral":"slate","data-brand":"aqua","data-accent":"aqua","data-solid":"contrast","data-solid-style":"flat","data-theme":"dark","data-border":"conservative","data-surface":"translucent","data-transition":"all","className":"__variable_d65c78 __variable_bcf733","children":["$","$Le",null,{"children":["$","$L2",null,{"style":{"minHeight":"100vh"},"as":"body","fillWidth":true,"margin":"0","padding":"0","children":[["$","$Lf",null,{"mask":{"cursor":false,"x":0,"y":0,"radius":75},"gradient":{"display":false,"x":50,"y":0,"width":100,"height":100,"tilt":0,"colorStart":"brand-background-strong","colorEnd":"static-transparent","opacity":50},"dots":{"display":false,"color":"brand-on-background-weak","size":1,"opacity":100},"grid":{"display":true,"color":"brand-background-strong","width":"$undefined","height":"$undefined","opacity":100},"lines":{"display":false,"opacity":100}}],["$","$Ld",null,{"fillWidth":true,"minHeight":"16"}],["$","$L10",null,{}],["$","$Ld",null,{"position":"relative","zIndex":0,"fillWidth":true,"paddingY":"l","paddingX":"l","horizontal":"center","flex":1,"children":["$","$Ld",null,{"horizontal":"center","fillWidth":true,"minHeight":"0","children":["$","$L11",null,{"children":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L2",null,{"as":"section","fill":true,"center":true,"paddingBottom":"160","children":[["$","$L12",null,{"marginBottom":"s","variant":"display-strong-xl","children":"404"}],["$","$L3",null,{"marginBottom":"l","variant":"display-default-xs","children":"Page Not Found"}],["$","$L12",null,{"onBackground":"neutral-weak","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}]}]}],["$","$Ld",null,{"as":"footer","position":"relative","fillWidth":true,"padding":"8","horizontal":"center","mobileDirection":"column","children":[["$","$Ld",null,{"className":"Footer_mobile__TYNqJ","maxWidth":"m","paddingY":"8","paddingX":"16","gap":"16","horizontal":"space-between","vertical":"center","children":[["$","$L12",null,{"variant":"body-default-s","onBackground":"neutral-strong","children":"Published on April 2nd, 2025."}],["$","$Ld",null,{"gap":"16","children":[["$","$L13","Email",{"href":"mailto:bryceservis@bryceserv.is","icon":"email","tooltip":"Email","size":"s","variant":"ghost"}],["$","$L13","Pretty Good Privacy",{"href":"/907873A1.asc","icon":"pgp","tooltip":"Pretty Good Privacy","size":"s","variant":"ghost"}],["$","$L13","Resume",{"href":"/resume.pdf","icon":"doc","tooltip":"Resume","size":"s","variant":"ghost"}],["$","$L13","GitHub",{"href":"https://github.com/servisbryce/","icon":"github","tooltip":"GitHub","size":"s","variant":"ghost"}],["$","$L13","LinkedIn",{"href":"https://www.linkedin.com/in/bryce-servis-328381357","icon":"linkedin","tooltip":"LinkedIn","size":"s","variant":"ghost"}]]}]]}],["$","$Ld",null,{"height":"80","show":"s"}]]}]]}]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"My blog."}],["$","meta","3",{"name":"description","content":"Read what Bryce Servis has been up to recently."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"My blog."}],["$","meta","7",{"property":"og:description","content":"Read what Bryce Servis has been up to recently."}],["$","meta","8",{"property":"og:url","content":"https://bryceserv.is/blog/"}],["$","meta","9",{"property":"og:image","content":"https://bryceserv.is/og?title=My%20blog."}],["$","meta","10",{"property":"og:image:alt","content":"My blog."}],["$","meta","11",{"property":"og:type","content":"website"}],["$","meta","12",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","13",{"name":"twitter:title","content":"My blog."}],["$","meta","14",{"name":"twitter:description","content":"Read what Bryce Servis has been up to recently."}],["$","meta","15",{"name":"twitter:image","content":"https://bryceserv.is/og?title=My%20blog."}],["$","meta","16",{"name":"next-size-adjust"}]]
1:null
